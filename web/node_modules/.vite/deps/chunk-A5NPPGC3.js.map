{
  "version": 3,
  "sources": ["../../@noble/hashes/cryptoBrowser.js", "../../@noble/hashes/utils.js", "../../c32check/lib/encoding.js", "../../@noble/hashes/_assert.js", "../../@noble/hashes/_sha2.js", "../../@noble/hashes/sha256.js", "../../c32check/lib/checksum.js", "../../base-x/src/index.js", "../../c32check/lib/base58check.js", "../../c32check/lib/address.js", "../../c32check/lib/index.js", "../../lodash.clonedeep/index.js", "../../@stacks/common/src/errors.ts", "../../@stacks/common/src/logger.ts", "../../@stacks/common/src/utils.ts", "../../@stacks/common/src/constants.ts", "../../@stacks/common/src/signatures.ts", "../../@stacks/common/src/keys.ts", "../../@stacks/common/src/buffer.ts", "../../@stacks/common/src/fetch.ts", "../../@stacks/transactions/src/BytesReader.ts", "../../@stacks/network/src/constants.ts", "../../@stacks/network/src/network.ts", "../../@stacks/transactions/src/constants.ts", "../../@stacks/transactions/src/errors.ts", "../../@noble/hashes/esm/_assert.js", "../../@noble/hashes/esm/cryptoBrowser.js", "../../@noble/hashes/esm/utils.js", "../../@noble/hashes/esm/hmac.js", "../../@noble/hashes/esm/_sha2.js", "../../@noble/hashes/esm/sha256.js", "../../@noble/secp256k1/lib/esm/index.js", "../../@stacks/transactions/src/keys.ts", "../../@stacks/transactions/src/address.ts", "../../@noble/hashes/esm/ripemd160.js", "../../@noble/hashes/esm/_u64.js", "../../@noble/hashes/esm/sha512.js", "../../@stacks/transactions/src/utils.ts", "../../@stacks/transactions/src/clarity/constants.ts", "../../@stacks/transactions/src/clarity/clarityValue.ts", "../../@stacks/transactions/src/clarity/values/booleanCV.ts", "../../@stacks/transactions/src/clarity/values/bufferCV.ts", "../../@stacks/transactions/src/clarity/values/intCV.ts", "../../@stacks/transactions/src/clarity/values/listCV.ts", "../../@stacks/transactions/src/clarity/values/optionalCV.ts", "../../@stacks/transactions/src/wire/create.ts", "../../@stacks/transactions/src/wire/types.ts", "../../@stacks/transactions/src/wire/helpers.ts", "../../@stacks/transactions/src/wire/serialization.ts", "../../@stacks/transactions/src/clarity/values/principalCV.ts", "../../@stacks/transactions/src/clarity/values/responseCV.ts", "../../@stacks/transactions/src/clarity/values/stringCV.ts", "../../@stacks/transactions/src/clarity/values/tupleCV.ts", "../../@stacks/transactions/src/clarity/deserialize.ts", "../../@stacks/transactions/src/clarity/serialize.ts", "../../@stacks/transactions/src/clarity/parser.ts", "../../@stacks/transactions/src/authorization.ts", "../../@stacks/transactions/src/builders.ts", "../../@stacks/transactions/src/contract-abi.ts", "../../@stacks/transactions/src/transaction.ts", "../../@stacks/transactions/src/fetch.ts", "../../@stacks/transactions/src/postcondition.ts", "../../@stacks/transactions/src/signer.ts", "../../@stacks/transactions/src/structuredDataSignature.ts", "../../@stacks/transactions/src/namespaces/address.ts", "../../@stacks/transactions/src/cl.ts", "../../@stacks/transactions/src/clarity/prettyPrint.ts", "../../@stacks/transactions/src/pc.ts"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n", "/**\n * @ignore\n */\nexport const ERROR_CODES = {\n  MISSING_PARAMETER: 'missing_parameter',\n  REMOTE_SERVICE_ERROR: 'remote_service_error',\n  INVALID_STATE: 'invalid_state',\n  NO_SESSION_DATA: 'no_session_data',\n  DOES_NOT_EXIST: 'does_not_exist',\n  FAILED_DECRYPTION_ERROR: 'failed_decryption_error',\n  INVALID_DID_ERROR: 'invalid_did_error',\n  NOT_ENOUGH_FUNDS_ERROR: 'not_enough_error',\n  INVALID_AMOUNT_ERROR: 'invalid_amount_error',\n  LOGIN_FAILED_ERROR: 'login_failed',\n  SIGNATURE_VERIFICATION_ERROR: 'signature_verification_failure',\n  CONFLICT_ERROR: 'conflict_error',\n  NOT_ENOUGH_PROOF_ERROR: 'not_enough_proof_error',\n  BAD_PATH_ERROR: 'bad_path_error',\n  VALIDATION_ERROR: 'validation_error',\n  PAYLOAD_TOO_LARGE_ERROR: 'payload_too_large_error',\n  PRECONDITION_FAILED_ERROR: 'precondition_failed_error',\n  UNKNOWN: 'unknown',\n};\n\nObject.freeze(ERROR_CODES);\n\n/**\n * @ignore\n */\ntype ErrorData = {\n  code: string;\n  parameter?: string;\n  message: string;\n};\n\n/**\n * @ignore\n */\nexport class BlockstackError extends Error {\n  message: string;\n\n  code: string;\n\n  parameter?: string;\n\n  constructor(error: ErrorData) {\n    super();\n    let message = error.message;\n    let bugDetails = `Error Code: ${error.code}`;\n    let stack = this.stack;\n    if (!stack) {\n      try {\n        throw new Error();\n      } catch (e: any) {\n        stack = e.stack;\n      }\n    } else {\n      bugDetails += `Stack Trace:\\n${stack}`;\n    }\n    message += `\\nIf you believe this exception is caused by a bug in stacks.js,\n      please file a bug report: https://github.com/blockstack/stacks.js/issues\\n\\n${bugDetails}`;\n    this.message = message;\n    this.code = error.code;\n    this.parameter = error.parameter ? error.parameter : undefined;\n  }\n\n  toString() {\n    return `${super.toString()}\n    code: ${this.code} param: ${this.parameter ? this.parameter : 'n/a'}`;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class MissingParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class RemoteServiceError extends BlockstackError {\n  response: Response;\n\n  constructor(response: Response, message: string = '') {\n    super({ code: ERROR_CODES.REMOTE_SERVICE_ERROR, message });\n    this.response = response;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidDIDError extends BlockstackError {\n  constructor(message: string = '') {\n    super({ code: ERROR_CODES.INVALID_DID_ERROR, message });\n    this.name = 'InvalidDIDError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughFundsError extends BlockstackError {\n  leftToFund: number;\n\n  constructor(leftToFund: number) {\n    const message = `Not enough UTXOs to fund. Left to fund: ${leftToFund}`;\n    super({ code: ERROR_CODES.NOT_ENOUGH_FUNDS_ERROR, message });\n    this.leftToFund = leftToFund;\n    this.name = 'NotEnoughFundsError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidAmountError extends BlockstackError {\n  fees: number;\n\n  specifiedAmount: number;\n\n  constructor(fees: number, specifiedAmount: number) {\n    const message =\n      `Not enough coin to fund fees transaction fees. Fees would be ${fees},` +\n      ` specified spend is  ${specifiedAmount}`;\n    super({ code: ERROR_CODES.INVALID_AMOUNT_ERROR, message });\n    this.specifiedAmount = specifiedAmount;\n    this.fees = fees;\n    this.name = 'InvalidAmountError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class LoginFailedError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to login: ${reason}`;\n    super({ code: ERROR_CODES.LOGIN_FAILED_ERROR, message });\n    this.message = message;\n    this.name = 'LoginFailedError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class SignatureVerificationError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to verify signature: ${reason}`;\n    super({ code: ERROR_CODES.SIGNATURE_VERIFICATION_ERROR, message });\n    this.message = message;\n    this.name = 'SignatureVerificationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class FailedDecryptionError extends BlockstackError {\n  constructor(message: string = 'Unable to decrypt cipher object.') {\n    super({ code: ERROR_CODES.FAILED_DECRYPTION_ERROR, message });\n    this.message = message;\n    this.name = 'FailedDecryptionError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidStateError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'InvalidStateError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NoSessionDataError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'NoSessionDataError';\n  }\n}\n\n/**\n * @ignore\n */\nexport interface GaiaHubErrorResponse {\n  status: number;\n  statusText: string;\n  body?: any; // todo: should this be string?\n}\n\nexport interface HubErrorDetails {\n  message?: string;\n  statusCode: number;\n  statusText: string;\n  [prop: string]: any;\n}\n\n/**\n * @ignore\n */\nexport class GaiaHubError extends BlockstackError {\n  hubError?: HubErrorDetails;\n\n  constructor(error: ErrorData, response: GaiaHubErrorResponse) {\n    super(error);\n    if (response) {\n      this.hubError = {\n        statusCode: response.status,\n        statusText: response.statusText,\n      };\n      if (typeof response.body === 'string') {\n        this.hubError.message = response.body;\n      } else if (typeof response.body === 'object') {\n        Object.assign(this.hubError, response.body);\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nexport class DoesNotExist extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.DOES_NOT_EXIST }, response);\n    this.name = 'DoesNotExist';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ConflictError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.CONFLICT_ERROR }, response);\n    this.name = 'ConflictError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughProofError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.NOT_ENOUGH_PROOF_ERROR }, response);\n    this.name = 'NotEnoughProofError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class BadPathError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.BAD_PATH_ERROR }, response);\n    this.name = 'BadPathError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ValidationError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.VALIDATION_ERROR }, response);\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class PayloadTooLargeError extends GaiaHubError {\n  /** Can be `null` when an oversized payload is detected client-side. */\n  hubError?: HubErrorDetails;\n\n  maxUploadByteSize: number;\n\n  constructor(message: string, response: GaiaHubErrorResponse | null, maxUploadByteSize: number) {\n    super({ message, code: ERROR_CODES.PAYLOAD_TOO_LARGE_ERROR }, response!);\n    this.name = 'PayloadTooLargeError';\n    this.maxUploadByteSize = maxUploadByteSize;\n  }\n}\n\n/**\n * @ignore\n */\nexport class PreconditionFailedError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.PRECONDITION_FAILED_ERROR }, response);\n    this.name = 'PreconditionFailedError';\n  }\n}\n", "import { config } from './config';\n\nconst levels = ['debug', 'info', 'warn', 'error', 'none'];\n\nconst levelToInt: { [level: string]: number } = {};\nconst intToLevel: { [int: number]: string } = {};\n\nfor (let index = 0; index < levels.length; index++) {\n  const level = levels[index];\n  levelToInt[level] = index;\n  intToLevel[index] = level;\n}\n\n/**\n * @ignore\n * @deprecated\n */\nexport class Logger {\n  static error(message: string) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  }\n\n  static warn(message: string) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  }\n\n  static info(message: string) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  }\n\n  static debug(message: string) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  }\n\n  static logMessage(level: string, message: string) {\n    return `[${level.toUpperCase()}] ${message}`;\n  }\n\n  static shouldLog(level: string) {\n    const currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  }\n}\n", "import { Logger } from './logger';\n\n/**\n *  @ignore\n * @deprecated\n */\nexport const BLOCKSTACK_HANDLER = 'blockstack';\n// todo: `next` get rid of all this blockstack stuff\n\n/**\n * Time\n * @private\n * @ignore\n * @deprecated\n */\nexport function nextYear() {\n  return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n * @deprecated\n */\nexport function nextMonth() {\n  return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n * @deprecated\n */\nexport function nextHour() {\n  return new Date(new Date().setHours(new Date().getHours() + 1));\n}\n\n/**\n * Converts megabytes to bytes. Returns 0 if the input is not a finite number.\n * @ignore\n * @deprecated\n */\nexport function megabytesToBytes(megabytes: number): number {\n  if (!Number.isFinite(megabytes)) {\n    return 0;\n  }\n  return Math.floor(megabytes * 1024 * 1024);\n}\n\n/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n * @deprecated\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n * @deprecated\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n * Query Strings\n * @private\n * @ignore\n * @deprecated\n */\nexport function updateQueryStringParameter(uri: string, key: string, value: string) {\n  const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n  const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n  if (uri.match(re)) {\n    return uri.replace(re, `$1${key}=${value}$2`);\n  } else {\n    return `${uri}${separator}${key}=${value}`;\n  }\n}\n\n/**\n * Versioning\n * @param {string} v1 - the left half of the version inequality\n * @param {string} v2 - right half of the version inequality\n * @returns {bool} iff v1 >= v2\n * @private\n * @ignore\n * @deprecated\n */\nexport function isLaterVersion(v1: string, v2: string) {\n  if (v1 === undefined || v1 === '') {\n    v1 = '0.0.0';\n  }\n\n  if (v2 === undefined || v1 === '') {\n    v2 = '0.0.0';\n  }\n\n  const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n  const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n\n  for (let index = 0; index < v2.length; index++) {\n    if (index >= v1.length) {\n      v2tuple.push(0);\n    }\n    if (v1tuple[index] < v2tuple[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * UUIDs\n * @private\n * @ignore\n * @deprecated\n */\nexport function makeUUID4() {\n  let d = new Date().getTime();\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\n/**\n * Checks if both urls pass the same origin check & are absolute\n * @param  {[type]}  uri1 first uri to check\n * @param  {[type]}  uri2 second uri to check\n * @return {Boolean} true if they pass the same origin check\n * @private\n * @ignore\n * @deprecated\n */\nexport function isSameOriginAbsoluteUrl(uri1: string, uri2: string) {\n  try {\n    const parsedUri1 = new URL(uri1);\n    const parsedUri2 = new URL(uri2);\n\n    const port1 =\n      parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n    const port2 =\n      parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n\n    const match = {\n      scheme: parsedUri1.protocol === parsedUri2.protocol,\n      hostname: parsedUri1.hostname === parsedUri2.hostname,\n      port: port1 === port2,\n      absolute:\n        (uri1.includes('http://') || uri1.includes('https://')) &&\n        (uri2.includes('http://') || uri2.includes('https://')),\n    };\n\n    return match.scheme && match.hostname && match.port && match.absolute;\n  } catch (error) {\n    console.log(error);\n    console.log('Parsing error in same URL origin check');\n    // Parse error\n    return false;\n  }\n}\n\n/**\n * Returns the global scope `Window`, `WorkerGlobalScope`, or `NodeJS.Global` if available in the\n * currently executing environment.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope\n *\n * This could be switched to `globalThis` once it is standardized and widely available.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n * @ignore\n */\nexport function getGlobalScope(): Window {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  // This function is meant to be called when accessing APIs that are typically only available in\n  // web-browser/DOM environments, but we also want to support situations where running in Node.js\n  // environment, and a polyfill was added to the Node.js `global` object scope without adding the\n  // `window` global object as well.\n  if (typeof global !== 'undefined') {\n    return global as unknown as Window;\n  }\n  throw new Error(\n    'Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available'\n  );\n}\n\n/** @deprecated */\nfunction getAPIUsageErrorMessage(\n  scopeObject: unknown,\n  apiName: string,\n  usageDesc?: string\n): string {\n  if (usageDesc) {\n    return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  } else {\n    return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  }\n}\n\ninterface GetGlobalObjectOptions {\n  /**\n   * Throw an error if the object is not found.\n   * @default false\n   */\n  throwIfUnavailable?: boolean;\n  /**\n   * Additional information to include in an error if thrown.\n   */\n  usageDesc?: string;\n  /**\n   * If the object is not found, return an new empty object instead of undefined.\n   * Requires [[throwIfUnavailable]] to be falsey.\n   * @default false\n   */\n  returnEmptyObject?: boolean;\n}\n\n/**\n * Returns an object from the global scope (`Window` or `WorkerGlobalScope`) if it\n * is available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable and will be\n * `undefined` unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObject<K extends Extract<keyof Window, string>>(\n  name: K,\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Window[K] | undefined {\n  let globalScope: Window | undefined = undefined;\n  try {\n    globalScope = getGlobalScope();\n    if (globalScope) {\n      const obj = globalScope[name];\n      if (obj) {\n        return obj;\n      }\n    }\n  } catch (error) {\n    Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n  }\n  if (throwIfUnavailable) {\n    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n    Logger.error(errMsg);\n    throw new Error(errMsg);\n  }\n  if (returnEmptyObject) {\n    return {} as any;\n  }\n  return undefined;\n}\n\n/**\n * Returns a specified subset of objects from the global scope (`Window` or `WorkerGlobalScope`)\n * if they are available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable will be `undefined`\n * unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObjects<K extends Extract<keyof Window, string>>(\n  names: K[],\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Pick<Window, K> {\n  let globalScope: Window | undefined;\n  try {\n    globalScope = getGlobalScope();\n  } catch (error) {\n    Logger.error(`Error getting global scope: ${error}`);\n    if (throwIfUnavailable) {\n      const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n      Logger.error(errMsg);\n      throw errMsg;\n    } else if (returnEmptyObject) {\n      globalScope = {} as any;\n    }\n  }\n\n  const result: Pick<Window, K> = {} as any;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    try {\n      if (globalScope) {\n        const obj = globalScope[name];\n        if (obj) {\n          result[name] = obj;\n        } else if (throwIfUnavailable) {\n          const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n          Logger.error(errMsg);\n          throw new Error(errMsg);\n        } else if (returnEmptyObject) {\n          result[name] = {} as any;\n        }\n      }\n    } catch (error) {\n      if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n      }\n    }\n  }\n  return result;\n}\n\n/** Different Integer representations */\nexport type IntegerType = number | string | bigint | Uint8Array;\n\n/**\n * Converts an integer-compatible value to a Uint8Array (given a byte length)\n * @example\n * ```ts\n * import { intToBytes } from \"@stacks/common\";\n * console.log(intToBytes(560, 4));\n * // Uint8Array(4) [ 0, 0, 2, 48 ]\n * ```\n */\nexport function intToBytes(value: IntegerType, byteLength: number): Uint8Array {\n  return bigIntToBytes(intToBigInt(value), byteLength);\n}\n\n/**\n * Converts an integer-compatible value to a bigint\n * @param value - The value to convert to a bigint\n * @returns The bigint representation of the value\n *\n * @example\n * ```ts\n * intToBigInt(123); // 123n\n * intToBigInt('0xbeef'); // 48879n\n * ```\n */\nexport function intToBigInt(value: IntegerType): bigint {\n  if (typeof value === 'bigint') return value;\n  if (typeof value === 'string') return BigInt(value);\n  if (typeof value === 'number') {\n    if (!Number.isInteger(value)) {\n      throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n    }\n    if (value > Number.MAX_SAFE_INTEGER) {\n      throw new RangeError(\n        `Invalid value. Values of type 'number' must be less than or equal to ${Number.MAX_SAFE_INTEGER}. For larger values, try using a BigInt instead.`\n      );\n    }\n    return BigInt(value);\n  }\n\n  if (isInstance(value, Uint8Array)) return BigInt(`0x${bytesToHex(value)}`);\n\n  throw new TypeError(\n    `intToBigInt: Invalid value type. Must be a number, bigint, BigInt-compatible string, or Uint8Array.`\n  );\n}\n\n/**\n * Adds a `0x` prefix to a string if it does not already have one.\n */\nexport function with0x(value: string): string {\n  return /^0x/i.test(value) // startsWith('0x') case insensitive\n    ? value\n    : `0x${value}`;\n}\n\n/**\n * Removes the `0x` prefix of a string if it has one.\n */\nexport function without0x(value: string): string {\n  return /^0x/i.test(value) // startsWith('0x') case insensitive\n    ? value.slice(2)\n    : value;\n}\n\n/**\n * Converts hex input string to bigint\n * @param hex - hex input string without 0x prefix and in big endian format\n * @example \"6c7cde4d702830c1db34ef7c19e2776f59107afef39084776fc88bc78dbb9656\"\n * @ignore\n */\nexport function hexToBigInt(hex: string): bigint {\n  if (typeof hex !== 'string')\n    throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n  // Big Endian\n  return BigInt(`0x${hex}`);\n}\n\n/**\n * Converts IntegerType to hex string\n */\nexport function intToHex(integer: IntegerType, byteLength = 8): string {\n  const value = typeof integer === 'bigint' ? integer : intToBigInt(integer);\n  return value.toString(16).padStart(byteLength * 2, '0');\n}\n\n/**\n * Converts hex string to integer\n */\nexport function hexToInt(hex: string): number {\n  return parseInt(hex, 16);\n}\n\n/**\n * Converts bigint to byte array\n * @param value bigint value to be converted\n * @param length byte array optional length\n * @return {Uint8Array} byte array\n */\nexport function bigIntToBytes(value: bigint, length: number = 16): Uint8Array {\n  const hex = intToHex(value, length);\n  return hexToBytes(hex);\n}\n\n/**\n * Converts from signed number to two's complement\n * MIN_VALUE = -(1 << (width - 1))\n * MAX_VALUE =  (1 << (width - 1)) - 1\n * @ignore\n */\nexport function toTwos(value: bigint, width: bigint): bigint {\n  if (\n    value < -(BigInt(1) << (width - BigInt(1))) ||\n    (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value\n  ) {\n    throw `Unable to represent integer in width: ${width}`;\n  }\n  if (value >= BigInt(0)) {\n    return BigInt(value);\n  }\n  return value + (BigInt(1) << width);\n}\n\n/**\n * Returns nth bit (right-to-left, zero-indexed)\n */\nfunction nthBit(value: bigint, n: bigint) {\n  return value & (BigInt(1) << n);\n}\n\n/** @ignore */\nexport function bytesToTwosBigInt(bytes: Uint8Array): bigint {\n  return fromTwos(BigInt(`0x${bytesToHex(bytes)}`), BigInt(bytes.byteLength * 8));\n}\n\n/**\n * Converts from two's complement to signed number\n * @internal\n */\nexport function fromTwos(value: bigint, width: bigint) {\n  if (nthBit(value, width - BigInt(1))) {\n    return value - (BigInt(1) << width);\n  }\n  return value;\n}\n\n// The following methods are based on `@noble/hashes` implementation\n// https://github.com/paulmillr/noble-hashes\n// Copyright (c) 2022 Paul Miller (https://paulmillr.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n\n/**\n * Converts bytes to the equivalent hex string\n * @example\n * ```\n * bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n * ```\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (const u of uint8a) {\n    hex += hexes[u];\n  }\n  return hex;\n}\n\n/**\n * Converts a hex string to the equivalent bytes\n * @example\n * ```\n * hexToBytes('deadbeef') // Uint8Array(4) [ 222, 173, 190, 239 ]\n * hexToBytes('0xdeadbeef') // Uint8Array(4) [ 222, 173, 190, 239 ]\n * ```\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n  }\n\n  hex = without0x(hex);\n  hex = hex.length % 2 ? `0${hex}` : hex; // left pad with a zero if odd length\n\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts a UTF-8 string to the equivalent bytes\n * @example\n * ```\n * utf8ToBytes('stacks Ӿ'); // Uint8Array(9) [ 115, 116, 97, 99, 107, 115, 32, 211, 190 ];\n * ```\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\n/**\n * Converts bytes to the equivalent UTF-8 string\n * @example\n * ```\n * bytesToUtf8(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 211, 190])); // 'stacks Ӿ'\n * ```\n */\nexport function bytesToUtf8(arr: Uint8Array): string {\n  return new TextDecoder().decode(arr);\n}\n\n/**\n * Converts an ASCII string to the equivalent bytes\n * @example\n * ```\n * asciiToBytes('stacks $'); // Uint8Array(8) [ 115, 116, 97, 99, 107, 115, 32, 36 ]\n * ```\n */\nexport function asciiToBytes(str: string) {\n  const byteArray = [];\n  for (let i = 0; i < str.length; i++) {\n    byteArray.push(str.charCodeAt(i) & 0xff); // ignore second bytes of UTF-16 character\n  }\n  return new Uint8Array(byteArray);\n}\n\n/**\n * Converts bytes to the equivalent ASCII string\n * @example\n * ```\n * bytesToAscii(Uint8Array.from([115, 116, 97, 99, 107, 115, 32, 36])); // 'stacks $'\n * ```\n */\nexport function bytesToAscii(arr: Uint8Array) {\n  return String.fromCharCode.apply(null, arr as any as number[]);\n}\n\nfunction isNotOctet(octet: number) {\n  return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\n\n/** @ignore */\nexport function octetsToBytes(numbers: number[]) {\n  if (numbers.some(isNotOctet)) throw new Error('Some values are invalid bytes.');\n  return new Uint8Array(numbers);\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n * @ignore\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n/** @ignore */\nexport function concatArray(elements: (Uint8Array | number[] | number)[]) {\n  return concatBytes(\n    ...elements.map(e => {\n      if (typeof e === 'number') return octetsToBytes([e]);\n      if (e instanceof Array) return octetsToBytes(e);\n      return e;\n    })\n  );\n}\n\n/**\n * Better `instanceof` check for types in different environments\n * @ignore\n */\nexport function isInstance<T>(object: any, clazz: { new (...args: any[]): T }): object is T {\n  return object instanceof clazz || object?.constructor?.name?.toLowerCase() === clazz.name;\n}\n\n/**\n * Checks whether a string is a valid hex string, and has a length of 64 characters.\n */\nexport function validateHash256(hex: string): boolean {\n  hex = without0x(hex);\n  if (hex.length !== 64) return false;\n  return /^[0-9a-fA-F]+$/.test(hex);\n}\n", "export const HIRO_MAINNET_URL = 'https://api.mainnet.hiro.so';\nexport const HIRO_TESTNET_URL = 'https://api.testnet.hiro.so';\nexport const DEVNET_URL = 'http://localhost:3999';\n\nexport const GAIA_URL = 'https://hub.blockstack.org';\n\n// todo: deduplicate magic variables\n\n/** @ignore internal */\nexport const PRIVATE_KEY_BYTES_COMPRESSED = 33;\n\n/** @ignore internal */\nexport const PRIVATE_KEY_BYTES_UNCOMPRESSED = 32;\n", "import { hexToInt } from './utils';\n\nconst COORDINATE_BYTES = 32;\n\n/** @ignore */\nexport function parseRecoverableSignatureVrs(signature: string) {\n  // todo: prefer RSV format or add format options of message signing functions\n  if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryIdHex = signature.slice(0, 2);\n  const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n  const s = signature.slice(2 + COORDINATE_BYTES * 2);\n  return {\n    recoveryId: hexToInt(recoveryIdHex),\n    r,\n    s,\n  };\n}\n\n/** @ignore */\nexport function signatureVrsToRsv(signature: string) {\n  return signature.slice(2) + signature.slice(0, 2);\n}\n\n/** @ignore */\nexport function signatureRsvToVrs(signature: string) {\n  return signature.slice(-2) + signature.slice(0, -2);\n}\n", "import { hexToBytes } from './utils';\n\nexport type PrivateKey = string | Uint8Array;\nexport type PublicKey = string | Uint8Array;\n\n/**\n * @private\n * @ignore\n */\nexport function privateKeyToBytes(privateKey: PrivateKey): Uint8Array {\n  const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n\n  if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n    throw new Error(\n      `Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`\n    );\n  }\n\n  if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n    throw new Error(\n      'Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01'\n    );\n  }\n\n  return privateKeyBuffer;\n}\n", "/** @ignore */\nexport function equals(a: Uint8Array, b: Uint8Array) {\n  if (a.byteLength !== b.byteLength) return false;\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n/**\n * @ignore\n * TODO: maybe remove and use string repeat\n */\nexport function alloc(length: number, value: number) {\n  const a = new Uint8Array(length);\n  for (let i = 0; i < length; i++) {\n    a[i] = value;\n  }\n  return a;\n}\n\n/** @ignore */\nexport function readUInt16BE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\n\n/** @ignore */\nexport function writeUInt16BE(destination: Uint8Array, value: number, offset = 0): Uint8Array {\n  destination[offset + 0] = value >>> 8;\n  destination[offset + 1] = value >>> 0;\n  return destination;\n}\n\n// The following methods are based on `microsoft/vscode` implementation\n// https://github.com/microsoft/vscode/blob/1e6ac12df197fc3e5d1c1bdb25702125cccb135a/src/vs/base/common/buffer.ts\n\n// Copyright (c) 2015 - present Microsoft Corporation\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n/** @ignore */\nexport function readUInt8(source: Uint8Array, offset: number): number {\n  return source[offset];\n}\n\n/** @ignore */\nexport function writeUInt8(destination: Uint8Array, value: number, offset = 0): Uint8Array {\n  destination[offset] = value;\n  return destination;\n}\n\n/** @ignore */\nexport function readUInt16LE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\n\n/** @ignore */\nexport function writeUInt16LE(destination: Uint8Array, value: number, offset = 0): Uint8Array {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n  return destination;\n}\n\n/** @ignore */\nexport function readUInt32BE(source: Uint8Array, offset: number): number {\n  return (\n    source[offset] * 2 ** 24 +\n    source[offset + 1] * 2 ** 16 +\n    source[offset + 2] * 2 ** 8 +\n    source[offset + 3]\n  );\n}\n\n/** @ignore */\nexport function writeUInt32BE(destination: Uint8Array, value: number, offset = 0): Uint8Array {\n  destination[offset + 3] = value;\n  value >>>= 8;\n  destination[offset + 2] = value;\n  value >>>= 8;\n  destination[offset + 1] = value;\n  value >>>= 8;\n  destination[offset] = value;\n  return destination;\n}\n\n/** @ignore */\nexport function readUInt32LE(source: Uint8Array, offset: number): number {\n  return (\n    ((source[offset + 0] << 0) >>> 0) |\n    ((source[offset + 1] << 8) >>> 0) |\n    ((source[offset + 2] << 16) >>> 0) |\n    ((source[offset + 3] << 24) >>> 0)\n  );\n}\n\n/** @ignore */\nexport function writeUInt32LE(destination: Uint8Array, value: number, offset = 0): Uint8Array {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 2] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 3] = value & 0b1111_1111;\n  return destination;\n}\n", "// Define default request options and allow modification using getters, setters\n// Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\nconst defaultFetchOpts: RequestInit = {\n  // By default referrer value will be client:origin: above reference link\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n  referrerPolicy: 'origin', // Use origin value for referrer policy\n  headers: {\n    'x-hiro-product': 'stacksjs',\n  },\n};\n\n/**\n * Get fetch options\n * @category Network\n */\nexport const getFetchOptions = () => {\n  return defaultFetchOpts;\n};\n\n/**\n * Sets global fetch options for stacks.js network calls.\n *\n * @example\n * Users can change the default referrer as well as other options when fetch is used internally by stacks.js:\n * ```\n * setFetchOptions({ referrer: 'no-referrer', referrerPolicy: 'no-referrer', ...otherRequestOptions });\n * ```\n * After calling {@link setFetchOptions} all subsequent network calls will use the specified options above.\n *\n * @see MDN Request: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @returns global fetch options after merging with previous options (or defaults)\n * @category Network\n * @related {@link getFetchOptions}\n */\nexport const setFetchOptions = (ops: RequestInit): RequestInit => {\n  return Object.assign(defaultFetchOpts, ops);\n};\n\n/** @ignore */\nexport async function fetchWrapper(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const fetchOpts = {};\n  // Use the provided options in request options along with default or user provided values\n  Object.assign(fetchOpts, defaultFetchOpts, init);\n\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n\nexport type FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\n\n/**\n * @ignore Internally used for letting networking functions specify \"API\" options.\n * Should be compatible with the `client`s created by the API and RPC packages.\n */\nexport interface ClientOpts {\n  baseUrl?: string;\n  fetch?: FetchFn;\n}\n\n/** @ignore Internally used for letting networking functions specify \"API\" options */\nexport interface ClientParam {\n  /** Optional API object (for `.baseUrl` and `.fetch`) used for API/Node, defaults to use mainnet */\n  client?: ClientOpts;\n}\n\nexport interface RequestContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n}\n\nexport interface ResponseContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n  response: Response;\n}\n\nexport interface FetchParams {\n  url: string;\n  init: RequestInit;\n}\n\nexport interface FetchMiddleware {\n  pre?: (context: RequestContext) => PromiseLike<FetchParams | void> | FetchParams | void;\n  post?: (context: ResponseContext) => Promise<Response | void> | Response | void;\n}\nexport interface ApiKeyMiddlewareOpts {\n  /** The middleware / API key header will only be added to requests matching this host. */\n  host?: RegExp | string;\n  /** The http header name used for specifying the API key value. */\n  httpHeader?: string;\n  /** The API key string to specify as an http header value. */\n  apiKey: string;\n}\n\n/** @ignore */\nexport function hostMatches(host: string, pattern: string | RegExp) {\n  if (typeof pattern === 'string') return pattern === host;\n  return pattern.exec(host);\n}\n\n/**\n * Creates a new middleware from an API key.\n * @example\n * ```\n * const apiMiddleware = createApiKeyMiddleware(\"example_e8e044a3_41d8b0fe_3dd3988ef302\");\n * const fetchFn = createFetchFn(apiMiddleware);\n * const network = new StacksMainnet({ fetchFn });\n * ```\n * @category Network\n * @related {@link createFetchFn}, {@link StacksNetwork}\n */\nexport function createApiKeyMiddleware({\n  apiKey,\n  host = /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i,\n  httpHeader = 'x-api-key',\n}: ApiKeyMiddlewareOpts): FetchMiddleware {\n  return {\n    pre: context => {\n      const reqUrl = new URL(context.url);\n      if (!hostMatches(reqUrl.host, host)) return; // Skip middleware if host does not match pattern\n\n      const headers =\n        context.init.headers instanceof Headers\n          ? context.init.headers\n          : (context.init.headers = new Headers(context.init.headers));\n      headers.set(httpHeader, apiKey);\n    },\n  };\n}\n\nfunction argsForCreateFetchFn(args: any[]): { fetchLib: FetchFn; middlewares: FetchMiddleware[] } {\n  let fetchLib: FetchFn = fetchWrapper;\n  let middlewares: FetchMiddleware[] = [];\n  if (args.length > 0 && typeof args[0] === 'function') {\n    fetchLib = args.shift();\n  }\n  if (args.length > 0) {\n    middlewares = args; // remaining args\n  }\n  return { fetchLib, middlewares };\n}\n\n/**\n * Creates a new network fetching function, which combines an optional fetch-compatible library with optional middleware.\n * @example\n * ```\n * const customFetch = createFetchFn(someMiddleware)\n * const customFetch = createFetchFn(fetch, someMiddleware)\n * const customFetch = createFetchFn(fetch, middlewareA, middlewareB)\n * ```\n * @category Network\n */\nexport function createFetchFn(fetchLib: FetchFn, ...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...args: any[]): FetchFn {\n  const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n\n  const fetchFn = async (url: string, init?: RequestInit | undefined): Promise<Response> => {\n    let fetchParams = { url, init: init ?? {} };\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.pre === 'function') {\n        const result = await Promise.resolve(\n          middleware.pre({\n            fetch: fetchLib,\n            ...fetchParams,\n          })\n        );\n        fetchParams = result ?? fetchParams;\n      }\n    }\n\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.post === 'function') {\n        const result = await Promise.resolve(\n          middleware.post({\n            fetch: fetchLib,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response?.clone() ?? response,\n          })\n        );\n        response = result ?? response;\n      }\n    }\n    return response;\n  };\n  return fetchFn;\n}\n\n// /** @ignore Creates a client-like object, which can be used without circular dependencies */\n// export function defaultClientOpts(opts?: { baseUrl?: string; fetch?: FetchFn }) {\n//   return {\n//     baseUrl: opts?.baseUrl ?? HIRO_MAINNET_URL,\n//     fetch: opts?.fetch ?? createFetchFn(),\n//   };\n// }\n", "import { bytesToHex, hexToBytes, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\n  [key in T]: TEnumValue;\n}): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * @ignore\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\n/** @ignore */\nexport class BytesReader {\n  source: Uint8Array;\n  consumed: number = 0;\n\n  constructor(bytes: string | Uint8Array) {\n    this.source = typeof bytes === 'string' ? hexToBytes(bytes) : bytes;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n\n  readUInt32BE(): number {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n\n  readUInt8(): number {\n    return readUInt8(this.readBytes(1), 0);\n  }\n\n  readUInt16BE(): number {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n\n  // todo: remove or implement with DataView?\n  // readBigUInt64BE(): bigint {\n  //   return this.source.readBigUInt64BE();\n  // }\n\n  get readOffset(): number {\n    return this.consumed;\n  }\n\n  set readOffset(val: number) {\n    this.consumed = val;\n  }\n\n  get internalBytes(): Uint8Array {\n    return this.source;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}\n", "/**\n * The chain ID (unsigned 32-bit integer), used so transactions can't be replayed on other chains.\n * Similar to the {@link TransactionVersion}.\n */\nexport enum ChainId {\n  Mainnet = 0x00000001,\n  Testnet = 0x80000000,\n}\n\n/**\n * The **peer** network ID.\n * Typically not used in signing, but used for broadcasting to the P2P network.\n * It can also be used to determine the parent of a subnet.\n *\n * **Attention:**\n * For mainnet/testnet the v2/info response `.network_id` refers to the chain ID.\n * For subnets the v2/info response `.network_id` refers to the peer network ID and the chain ID (they are the same for subnets).\n * The `.parent_network_id` refers to the actual peer network ID (of the parent) in both cases.\n */\nexport enum PeerNetworkId {\n  Mainnet = 0x17000000,\n  Testnet = 0xff000000,\n}\n\nexport const DEFAULT_CHAIN_ID = ChainId.Mainnet;\n\n/**\n * The transaction version, used so transactions can't be replayed on other networks.\n * Similar to the {@link ChainId}.\n * Used internally for serializing and deserializing transactions.\n */\nexport enum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\n/**\n * Address versions for identifying address types in an encoded Stacks address.\n * The address version is a single byte, indicating the address type.\n * Every Stacks address starts with `S` followed by a single character indicating the address version.\n * The second character is the c32-encoded AddressVersion byte.\n */\nexport enum AddressVersion {\n  /** `P` — A single-sig address for mainnet (starting with `SP`) */\n  MainnetSingleSig = 22,\n  /** `M` — A multi-sig address for mainnet (starting with `SM`) */\n  MainnetMultiSig = 20,\n  /** `T` — A single-sig address for testnet (starting with `ST`) */\n  TestnetSingleSig = 26,\n  /** `N` — A multi-sig address for testnet (starting with `SN`) */\n  TestnetMultiSig = 21,\n}\n\nexport const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\n/** @ignore */\nexport function whenTransactionVersion(transactionVersion: TransactionVersion) {\n  return <T>(map: Record<TransactionVersion, T>): T => map[transactionVersion];\n}\n", "import {\n  DEVNET_URL,\n  FetchFn,\n  HIRO_MAINNET_URL,\n  HIRO_TESTNET_URL,\n  createFetchFn,\n  createApiKeyMiddleware,\n  ClientOpts,\n  ApiKeyMiddlewareOpts,\n} from '@stacks/common';\nimport { AddressVersion, ChainId, PeerNetworkId, TransactionVersion } from './constants';\nimport { ClientParam } from '@stacks/common';\n\nexport type StacksNetwork = {\n  chainId: number;\n  transactionVersion: number;\n  peerNetworkId: number;\n  magicBytes: string;\n  bootAddress: string;\n  addressVersion: {\n    singleSig: number;\n    multiSig: number;\n  };\n  // todo: add check32 character bytes string\n  client: {\n    baseUrl: string; // URL is always required\n    fetch?: FetchFn; // fetch is optional and will be created by default in fetch helpers\n  };\n};\n\nexport interface NetworkParam {\n  network?: StacksNetworkName | StacksNetwork;\n}\n\nexport type NetworkClientParam = NetworkParam & ClientParam;\n\nexport const STACKS_MAINNET: StacksNetwork = {\n  chainId: ChainId.Mainnet,\n  transactionVersion: TransactionVersion.Mainnet,\n  peerNetworkId: PeerNetworkId.Mainnet,\n  magicBytes: 'X2', // todo: comment bytes version of magic bytes\n  bootAddress: 'SP000000000000000000002Q6VF78',\n  addressVersion: {\n    singleSig: AddressVersion.MainnetSingleSig,\n    multiSig: AddressVersion.MainnetMultiSig,\n  },\n  client: { baseUrl: HIRO_MAINNET_URL },\n};\n\nexport const STACKS_TESTNET: StacksNetwork = {\n  chainId: ChainId.Testnet,\n  transactionVersion: TransactionVersion.Testnet,\n  peerNetworkId: PeerNetworkId.Testnet,\n  magicBytes: 'T2', // todo: comment bytes version of magic bytes\n  bootAddress: 'ST000000000000000000002AMW42H',\n  addressVersion: {\n    singleSig: AddressVersion.TestnetSingleSig,\n    multiSig: AddressVersion.TestnetMultiSig,\n  },\n  client: { baseUrl: HIRO_TESTNET_URL },\n};\n\nexport const STACKS_DEVNET: StacksNetwork = {\n  ...STACKS_TESTNET, // todo: ensure deep copy\n  addressVersion: { ...STACKS_TESTNET.addressVersion }, // deep copy\n  magicBytes: 'id', // todo: comment bytes version of magic bytes\n  client: { baseUrl: DEVNET_URL },\n};\n\nexport const STACKS_MOCKNET: StacksNetwork = {\n  ...STACKS_DEVNET,\n  addressVersion: { ...STACKS_DEVNET.addressVersion }, // deep copy\n  client: { ...STACKS_DEVNET.client }, // deep copy\n};\n\n/** @ignore internal */\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'] as const;\n/** The enum-style names of different common Stacks networks */\nexport type StacksNetworkName = (typeof StacksNetworks)[number];\n\n/**\n * Returns the default network for a given name\n * @example\n * ```ts\n * networkFromName('mainnet') // same as STACKS_MAINNET\n * networkFromName('testnet') // same as STACKS_TESTNET\n * networkFromName('devnet') // same as STACKS_DEVNET\n * networkFromName('mocknet') // same as STACKS_MOCKNET\n * ```\n */\nexport function networkFromName(name: StacksNetworkName) {\n  switch (name) {\n    case 'mainnet':\n      return STACKS_MAINNET;\n    case 'testnet':\n      return STACKS_TESTNET;\n    case 'devnet':\n      return STACKS_DEVNET;\n    case 'mocknet':\n      return STACKS_MOCKNET;\n    default:\n      throw new Error(`Unknown network name: ${name}`);\n  }\n}\n\n/** @ignore */\nexport function networkFrom(network: StacksNetworkName | StacksNetwork) {\n  if (typeof network === 'string') return networkFromName(network);\n  return network;\n}\n\n/** @ignore */\nexport function defaultUrlFromNetwork(network?: StacksNetworkName | StacksNetwork) {\n  if (!network) return HIRO_MAINNET_URL; // default to mainnet if no network is given\n\n  network = networkFrom(network);\n\n  return !network || network.transactionVersion === TransactionVersion.Mainnet\n    ? HIRO_MAINNET_URL // default to mainnet if txVersion is mainnet\n    : network.magicBytes === 'id'\n      ? DEVNET_URL // default to devnet if magicBytes are devnet\n      : HIRO_TESTNET_URL;\n}\n\n/**\n * Returns the client of a network, creating a new fetch function if none is available\n */\nexport function clientFromNetwork(network: StacksNetwork): Required<ClientOpts> {\n  if (network.client.fetch) return network.client as Required<ClientOpts>;\n  return {\n    ...network.client,\n    fetch: createFetchFn(),\n  };\n}\n\n/**\n * Creates a customized Stacks network.\n *\n * This function allows you to create a network based on a predefined network\n * (mainnet, testnet, devnet, mocknet) or a custom network object. You can also customize\n * the network with an API key or other client options.\n *\n * @example\n * ```ts\n * // Create a basic network from a network name\n * const network = createNetwork('mainnet');\n * const network = createNetwork(STACKS_MAINNET);\n * ```\n *\n * @example\n * ```ts\n * // Create a network with an API key\n * const network = createNetwork('testnet', 'my-api-key');\n * const network = createNetwork(STACKS_TESTNET, 'my-api-key');\n * ```\n *\n * @example\n * ```ts\n * // Create a network with options object\n * const network = createNetwork({\n *   network: 'mainnet',\n *   apiKey: 'my-api-key',\n * });\n * ```\n *\n * @example\n * ```ts\n * // Create a network with options object with custom API key options\n * const network = createNetwork({\n *   network: 'mainnet',\n *   apiKey: 'my-api-key',\n *   host: /\\.example\\.com$/, // default is /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i\n *   httpHeader: 'x-custom-api-key', // default is 'x-api-key'\n * });\n * ```\n *\n * @example\n * ```ts\n * // Create a network with custom client options\n * const network = createNetwork({\n *   network: STACKS_TESTNET,\n *   client: {\n *     baseUrl: 'https://custom-api.example.com',\n *     fetch: customFetchFunction\n *   }\n * });\n * ```\n */\nexport function createNetwork(network: StacksNetworkName | StacksNetwork): StacksNetwork;\nexport function createNetwork(\n  network: StacksNetworkName | StacksNetwork,\n  apiKey: string\n): StacksNetwork;\nexport function createNetwork(\n  options: {\n    network: StacksNetworkName | StacksNetwork;\n    client?: ClientOpts;\n  } & Partial<ApiKeyMiddlewareOpts>\n): StacksNetwork;\nexport function createNetwork(\n  arg1:\n    | StacksNetworkName\n    | StacksNetwork\n    | ({\n        network: StacksNetworkName | StacksNetwork;\n        client?: ClientOpts;\n      } & Partial<ApiKeyMiddlewareOpts>),\n  arg2?: string\n): StacksNetwork {\n  const baseNetwork = networkFrom(\n    typeof arg1 === 'object' && 'network' in arg1 ? arg1.network : arg1\n  );\n\n  const newNetwork: StacksNetwork = {\n    ...baseNetwork,\n    addressVersion: { ...baseNetwork.addressVersion }, // deep copy\n    client: { ...baseNetwork.client }, // deep copy\n  };\n\n  // Options object argument\n  if (typeof arg1 === 'object' && 'network' in arg1) {\n    if (arg1.client) {\n      newNetwork.client.baseUrl = arg1.client.baseUrl ?? newNetwork.client.baseUrl;\n      newNetwork.client.fetch = arg1.client.fetch ?? newNetwork.client.fetch;\n    }\n\n    if (typeof arg1.apiKey === 'string') {\n      const middleware = createApiKeyMiddleware(arg1 as ApiKeyMiddlewareOpts);\n      newNetwork.client.fetch = newNetwork.client.fetch\n        ? createFetchFn(newNetwork.client.fetch, middleware)\n        : createFetchFn(middleware);\n    }\n\n    return newNetwork;\n  }\n\n  // Additional API key argument\n  if (typeof arg2 === 'string') {\n    const middleware = createApiKeyMiddleware({ apiKey: arg2 });\n    newNetwork.client.fetch = newNetwork.client.fetch\n      ? createFetchFn(newNetwork.client.fetch, middleware)\n      : createFetchFn(middleware);\n    return newNetwork;\n  }\n\n  // Only network argument\n  return newNetwork;\n}\n", "/** @ignore internal */\nexport const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\n\nexport const MAX_STRING_LENGTH_BYTES = 128;\nexport const CLARITY_INT_SIZE = 128;\nexport const CLARITY_INT_BYTE_SIZE = 16;\nexport const COINBASE_BYTES_LENGTH = 32;\nexport const VRF_PROOF_BYTES_LENGTH = 80;\nexport const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nexport const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nexport const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nexport const MEMO_MAX_LENGTH_BYTES = 34;\n\n// https://github.com/stacks-network/stacks-core/blob/31d048c6c345c8cb7be38283385e54870b1c3c83/stacks-common/src/codec/mod.rs#L206\n// messages can't be bigger than 16MB plus the preamble and relayers\nconst MAX_PAYLOAD_LEN = 1 + 16 * 1024 * 1024;\nconst PREAMBLE_ENCODED_SIZE = 165;\nconst MAX_RELAYERS_LEN = 16;\nconst PEER_ADDRESS_ENCODED_SIZE = 16;\nconst HASH160_ENCODED_SIZE = 20;\nconst NEIGHBOR_ADDRESS_ENCODED_SIZE = PEER_ADDRESS_ENCODED_SIZE + 2 + HASH160_ENCODED_SIZE;\nconst RELAY_DATA_ENCODED_SIZE = NEIGHBOR_ADDRESS_ENCODED_SIZE + 4;\nexport const STRING_MAX_LENGTH =\n  MAX_PAYLOAD_LEN + (PREAMBLE_ENCODED_SIZE + MAX_RELAYERS_LEN * RELAY_DATA_ENCODED_SIZE);\n\n/**\n * The type of transaction (payload) that is being serialized.\n * Used internally for serializing and deserializing transactions.\n */\nexport enum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  VersionedSmartContract = 0x06,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n  CoinbaseToAltRecipient = 0x05,\n  TenureChange = 0x7,\n  NakamotoCoinbase = 0x08,\n}\n\n/**\n * The version of Clarity used to deploy a smart contract.\n * Most methods will default to the latest available version of Clarity.\n */\nexport enum ClarityVersion {\n  Clarity1 = 1,\n  Clarity2 = 2,\n  Clarity3 = 3,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update.\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nexport enum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\n/** @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update. */\nexport const AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'] as const;\n/** @deprecated `AnchorMode` is not needed in Stacks since the Nakamoto update. */\nexport type AnchorModeName = (typeof AnchorModeNames)[number];\n\nconst AnchorModeMap = {\n  [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n  [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n  [AnchorModeNames[2]]: AnchorMode.Any,\n  [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n  [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n  [AnchorMode.Any]: AnchorMode.Any,\n};\n\n/** @ignore @deprecated Block anchor modes don't exist on-chain anymore. */\nexport function anchorModeFrom(mode: AnchorModeName | AnchorMode): AnchorMode {\n  if (mode in AnchorModeMap) return AnchorModeMap[mode];\n  throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\n\n/**\n * How to treat unspecified transfers of a transaction.\n * Used for creating transactions.\n *\n * Post-conditions are **always** be validated by nodes, regardless of the {@link PostConditionMode}.\n * `PostConditionMode.Allow` will allow additional (aka unspecified) transfers, while `PostConditionMode.Deny` will not.\n */\nexport enum PostConditionMode {\n  /** `Allow` — Allow unspecified transfers */\n  Allow = 0x01,\n  /** `Deny` — Do not allow unspecified transfers */\n  Deny = 0x02,\n}\n\n/**\n * The type of asset a post-condition is referring to.\n * Used for serializing post-conditions.\n */\nexport enum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\n/**\n * The sponsorship mode of a transaction.\n *\n * Specifies whether a transaction is sponsored or not.\n */\nexport enum AuthType {\n  /** `Standard` (not sponsored) — The transaction is not sponsored. The sender will need to spend fees. */\n  Standard = 0x04,\n  /** `Sponsored` — The transaction is sponsored. The sponsor will spend fees on behalf of the sender. */\n  Sponsored = 0x05,\n}\n\n/**\n * Serialization modes for public keys to addresses.\n * Four different modes are supported due to legacy compatibility with Stacks v1 addresses.\n */\nexport enum AddressHashMode {\n  /** `SingleSigHashMode` — hash160(public-key), same as bitcoin's p2pkh */\n  P2PKH = 0x00,\n  /** Legacy `MultiSigHashMode` — hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  P2SH = 0x01,\n  /** `SingleSigHashMode` — hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  P2WPKH = 0x02,\n  /** Legacy `MultiSigHashMode` — hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  P2WSH = 0x03,\n  /** Non-Sequential `MultiSigHashMode` — hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  P2SHNonSequential = 0x05,\n  /** Non-Sequential `MultiSigHashMode` — hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  P2WSHNonSequential = 0x07,\n\n  // todo: once live, rename to remove `NonSequential` and add `Legacy` to sequential mutlisig\n}\n\nexport type SingleSigHashMode = AddressHashMode.P2PKH | AddressHashMode.P2WPKH;\nexport type MultiSigHashMode =\n  | AddressHashMode.P2SH\n  | AddressHashMode.P2WSH\n  | AddressHashMode.P2SHNonSequential\n  | AddressHashMode.P2WSHNonSequential;\n\n// re-export for backwards compatibility\nexport { AddressVersion } from '@stacks/network';\n\n// todo: try to remove this\nexport enum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\n/**\n * The type of fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\n/**\n * The type of non-fungible token post-condition comparison.\n * Used for serializing post-conditions.\n */\nexport enum NonFungibleConditionCode {\n  Sends = 0x10,\n  DoesNotSend = 0x11,\n}\n\n/**\n * The type of sender for a post-condition.\n */\nexport enum PostConditionPrincipalId {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\n/**\n * The type of asset used in a post-condition.\n */\nexport enum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nexport enum TenureChangeCause {\n  /** A valid winning block-commit */\n  BlockFound = 0,\n  /** The next burnchain block is taking too long, so extend the runtime budget */\n  Extended = 1,\n}\n\nexport enum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\n// todo: refactor this, if only used in one place, just use a string\n/** @ignore */\nexport enum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n", "class TransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class DeserializationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Thrown when `NoEstimateAvailable` is received as an error reason from a\n * Stacks node. The Stacks node has not seen this kind of contract-call before,\n * and it cannot provide an estimate yet.\n * @see https://docs.hiro.so/api#tag/Fees/operation/post_fee_transaction\n */\nexport class NoEstimateAvailableError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class NotImplementedError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class SigningError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nexport class VerificationError extends TransactionError {\n  constructor(message: string) {\n    super(message);\n  }\n}\n", "export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n", "export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n", "import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n", "import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n", "/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n", "import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport {\n  getPublicKey as nobleGetPublicKey,\n  Point,\n  Signature,\n  signSync,\n  utils,\n} from '@noble/secp256k1';\nimport {\n  bytesToHex,\n  hexToBigInt,\n  hexToBytes,\n  intToHex,\n  parseRecoverableSignatureVrs,\n  PRIVATE_KEY_BYTES_COMPRESSED,\n  PrivateKey,\n  privateKeyToBytes,\n  PublicKey,\n  signatureRsvToVrs,\n  signatureVrsToRsv,\n} from '@stacks/common';\nimport { networkFrom, STACKS_MAINNET, StacksNetwork, StacksNetworkName } from '@stacks/network';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion } from './address';\nimport { AddressHashMode, AddressVersion, PubKeyEncoding } from './constants';\nimport { hash160, hashP2PKH } from './utils';\nimport { addressFromVersionHash, addressToString, PublicKeyWire, StacksWireType } from './wire';\n\n/**\n * To use secp256k1.signSync set utils.hmacSha256Sync to a function using noble-hashes\n * secp256k1.signSync is the counter part of secp256k1.sign (async version)\n * secp256k1.signSync is used within signWithKey in this file\n * secp256k1.signSync is used to maintain the semantics of signWithKey while migrating from elliptic lib\n * utils.hmacSha256Sync docs: https://github.com/paulmillr/noble-secp256k1 readme file\n */\nutils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key bytes or hex string */\n  privateKey: PrivateKey,\n  network: StacksNetworkName | StacksNetwork = 'mainnet'\n): string {\n  network = networkFrom(network);\n  const publicKey = privateKeyToPublic(privateKey);\n  return getAddressFromPublicKey(publicKey, network);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key bytes or hex string */\n  publicKey: PublicKey,\n  network: StacksNetworkName | StacksNetwork = 'mainnet'\n): string {\n  network = networkFrom(network);\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  const addrVer = addressHashModeToVersion(AddressHashMode.P2PKH, network);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(publicKey));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(publicKey: PublicKey): PublicKeyWire {\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return {\n    type: StacksWireType.PublicKey,\n    data: publicKey,\n  };\n}\n\nexport function publicKeyFromSignatureVrs(\n  messageHash: string,\n  messageSignature: string,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  const parsedSignature = parseRecoverableSignatureVrs(messageSignature);\n  const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n  const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n  const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n  return point.toHex(compressed);\n}\n\nexport function publicKeyFromSignatureRsv(\n  messageHash: string,\n  messageSignature: string,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n): string {\n  return publicKeyFromSignatureVrs(\n    messageHash,\n    signatureRsvToVrs(messageSignature),\n    pubKeyEncoding\n  );\n}\n\nexport function privateKeyToHex(publicKey: PublicKey): string {\n  return typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n}\nexport const publicKeyToHex = privateKeyToHex;\n\n/**\n * Checks if a private key is compressed\n *\n * @example\n * ```ts\n * isPrivateKeyCompressed('64879bd015b0fbc19a798040b399b59c3c756cc79eaa9d24d18e66106ad7ee4801'); // true\n * isPrivateKeyCompressed('64879bd015b0fbc19a798040b399b59c3c756cc79eaa9d24d18e66106ad7ee48'); // false\n * ```\n */\nexport const isPrivateKeyCompressed = privateKeyIsCompressed;\n\n/** @deprecated Use {@link isPrivateKeyCompressed} instead */\nexport function privateKeyIsCompressed(privateKey: PrivateKey): boolean {\n  const length = typeof privateKey === 'string' ? privateKey.length / 2 : privateKey.byteLength;\n  return length === PRIVATE_KEY_BYTES_COMPRESSED;\n}\n\n/**\n * Checks if a public key is compressed\n *\n * @example\n * ```ts\n * isPublicKeyCompressed('0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b'); // true\n * isPublicKeyCompressed('04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6'); // false\n * ```\n */\nexport const isPublicKeyCompressed = publicKeyIsCompressed;\n\n/** @deprecated Use {@link isPublicKeyCompressed} instead */\nexport function publicKeyIsCompressed(publicKey: PublicKey): boolean {\n  return !publicKeyToHex(publicKey).startsWith('04');\n}\n\n/**\n * Get the public key from a private key.\n * Allows for \"compressed\" and \"uncompressed\" private keys.\n * > Matches legacy `pubKeyfromPrivKey`, `getPublic` function behavior\n */\nexport function privateKeyToPublic(privateKey: PrivateKey): PublicKey {\n  privateKey = privateKeyToBytes(privateKey);\n  const isCompressed = privateKeyIsCompressed(privateKey);\n  return bytesToHex(nobleGetPublicKey(privateKey.slice(0, 32), isCompressed));\n}\n\n/**\n * Compresses a public key\n *\n * @example\n * ```ts\n * compressPublicKey('04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6');\n * // '0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b'\n * ```\n */\nexport function compressPublicKey(publicKey: PublicKey): string {\n  return Point.fromHex(publicKeyToHex(publicKey)).toHex(true);\n}\n\n/**\n * Uncompresses a public key\n *\n * @example\n * ```ts\n * uncompressPublicKey('0367b23680c33a3adc784b80952f9bba83169d84c6567f49c9a92f7cc9c9b6f61b');\n * // '04171ee91c13f2007bd22c3280987d113e9ffdb2f10631783473899868e67dcdb876f2be26558ea1d4194a96a3707aff085c96a643d43e02c0e9e67c5d47a7dac6'\n * ```\n */\nexport function uncompressPublicKey(publicKey: PublicKey): string {\n  return Point.fromHex(publicKeyToHex(publicKey)).toHex(false);\n}\n\n/** @deprecated Use {@link randomPrivateKey} instead */\nexport const makeRandomPrivKey = randomPrivateKey;\n\n/**\n * Generate a random private key (compressed)\n *\n * @example\n * ```ts\n * const privateKey = randomPrivateKey();\n * // 'f5a31c1268a1e37d4edaa05c7d11183c5fbfdcdc48aae36ea4d8cd5cb709932801'\n * ```\n */\nexport function randomPrivateKey(): string {\n  return compressPrivateKey(utils.randomPrivateKey());\n}\n\n/**\n * @deprecated The Clarity compatible {@link signMessageHashRsv} is preferred, but differs in signature format\n * @returns A recoverable signature (in VRS order)\n */\nexport function signWithKey(privateKey: PrivateKey, messageHash: string): string {\n  privateKey = privateKeyToBytes(privateKey);\n  const [rawSignature, recoveryId] = signSync(messageHash, privateKey.slice(0, 32), {\n    canonical: true,\n    recovered: true,\n  });\n  if (recoveryId == null) {\n    throw new Error('No signature recoveryId received');\n  }\n  const recoveryIdHex = intToHex(recoveryId, 1);\n  return recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex(); // V + RS\n}\n\n/**\n * Signs a message hash using a private key. The resulting signature along with\n * the original message can be verified using {@link verifyMessageSignatureRsv}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signMessageHashRsv({\n  messageHash,\n  privateKey,\n}: {\n  messageHash: string;\n  privateKey: PrivateKey;\n}): string {\n  return signatureVrsToRsv(signWithKey(privateKey, messageHash));\n}\n\n/**\n * @ignore\n */\nexport function compressPrivateKey(privateKey: PrivateKey): string {\n  privateKey = privateKeyToHex(privateKey);\n\n  return privateKey.length == PRIVATE_KEY_BYTES_COMPRESSED * 2\n    ? privateKey // leave compressed\n    : `${privateKey}01`; // compress\n}\n\n/**\n * Convert a private key to a single-sig address.\n * @returns A Stacks address string (encoded with c32check)\n * @example\n * ```\n * const address = privateKeyToAddress(\"73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801\");\n * // SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR\n * ```\n */\nexport function privateKeyToAddress(\n  privateKey: PrivateKey,\n  network?: StacksNetworkName | StacksNetwork\n): string {\n  const publicKey = privateKeyToPublic(privateKey);\n  return publicKeyToAddressSingleSig(publicKey, network);\n}\n\n/**\n * Convert a public key to an address.\n * @returns A Stacks address string (encoded with c32check)\n * @example Public key to address\n * ```\n * const address = publicKeyToAddress(\"03ef788b3830c00abe8f64f62dc32fc863bc0b2cafeb073b6c8e1c7657d9c2c3ab\");\n * const address = publicKeyToAddress(\"03ef788b3830c00abe8f64f62dc32fc863bc0b2cafeb073b6c8e1c7657d9c2c3ab\", STACKS_TESTNET);\n * ```\n */\nexport function publicKeyToAddress(\n  publicKey: PublicKey,\n  network?: StacksNetworkName | StacksNetwork\n): string;\nexport function publicKeyToAddress(version: AddressVersion, publicKey: PublicKey): string;\nexport function publicKeyToAddress(\n  ...args: Parameters<typeof publicKeyToAddressSingleSig> | Parameters<typeof _publicKeyToAddress>\n): string {\n  if (typeof args[0] === 'number') return _publicKeyToAddress(...args);\n  return publicKeyToAddressSingleSig(...args);\n}\n\n/** Legacy implementation for backwards compatibility @ignore */\nfunction _publicKeyToAddress(version: AddressVersion, publicKey: PublicKey): string {\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return c32address(version, bytesToHex(hash160(publicKey)));\n}\n\n/** Alias for {@link publicKeyToAddress} */\nexport function publicKeyToAddressSingleSig(\n  publicKey: PublicKey,\n  network?: StacksNetworkName | StacksNetwork\n): string {\n  network = network ? networkFrom(network) : STACKS_MAINNET;\n  publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n  return c32address(network.addressVersion.singleSig, bytesToHex(hash160(publicKey)));\n}\n\n// todo: add multi-sig address support from [key]s!\n", "import {\n  STACKS_MAINNET,\n  StacksNetwork,\n  StacksNetworkName,\n  TransactionVersion,\n  networkFrom,\n} from '@stacks/network';\nimport { AddressHashMode, AddressVersion } from './constants';\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  network?: StacksNetworkName | StacksNetwork\n): AddressVersion {\n  network = networkFrom(network ?? STACKS_MAINNET);\n  switch (hashMode) {\n    case AddressHashMode.P2PKH:\n      switch (network.transactionVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected transactionVersion ${network.transactionVersion} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.P2SH:\n    case AddressHashMode.P2SHNonSequential:\n    case AddressHashMode.P2WPKH:\n    case AddressHashMode.P2WSH:\n    case AddressHashMode.P2WSHNonSequential:\n      switch (network.transactionVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected transactionVersion ${network.transactionVersion} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${hashMode}`);\n  }\n}\n", "import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n", "const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n", "import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { ClarityValue, deserializeCV, serializeCV } from './clarity';\nimport { ContractIdString } from './types';\n\n// Export verify as utility method for signature verification\nexport { verify as verifySignature } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates random bytes of given length\n * @param {number} bytesLength an optional bytes length, default is 32 bytes\n */\nexport const randomBytes = (bytesLength?: number): Uint8Array => utils.randomBytes(bytesLength);\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 ? `0${hexString}` : hexString;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? utf8ToBytes(string).length > maxLengthBytes : false;\n\n/** @internal @deprecated */\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\n// todo: remove this function and instead delete param without clone (if possible)?\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport const hash160 = (input: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(input));\n};\n\n/** @deprecated renamed to {@link txidFromBytes} */\nexport const txidFromData = (data: Uint8Array): string => {\n  return bytesToHex(sha512_256(data));\n};\n\n/**\n * Computes the transaction ID of the bytes from a serialized transaction (or any other bytes using the same hash function).\n */\nexport const txidFromBytes = txidFromData;\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\n/** @internal */\nexport const hashP2PKH = (input: Uint8Array): string => {\n  return bytesToHex(hash160(input));\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address over p2sh (p2h-p2wpkh)\n/** @internal */\nexport const hashP2WPKH = (input: Uint8Array): string => {\n  const keyHash = hash160(input);\n  const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\n/** @internal */\nexport const hashP2SH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bytesArray = [];\n  // OP_n\n  bytesArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bytesArray.push(pubKey.length);\n    bytesArray.push(pubKey);\n  });\n  // OP_m\n  bytesArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bytesArray.push(174);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multisig address over p2sh (p2sh-p2wsh)\n/** @internal */\nexport const hashP2WSH = (numSigs: number, pubKeys: Uint8Array[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2WSH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const scriptArray = [];\n  // OP_n\n  scriptArray.push(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    scriptArray.push(pubKey.length);\n    scriptArray.push(pubKey);\n  });\n  // OP_m\n  scriptArray.push(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  scriptArray.push(174);\n\n  const script = concatArray(scriptArray);\n  const digest = sha256(script);\n\n  const bytesArray = [];\n  bytesArray.push(0);\n  bytesArray.push(digest.length);\n  bytesArray.push(digest);\n\n  const redeemScript = concatArray(bytesArray);\n  const redeemScriptHash = hash160(redeemScript);\n  return bytesToHex(redeemScriptHash);\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${serialized}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  return deserializeCV(hex);\n}\n\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) return hexToCV(response.result);\n  throw new Error(response.cause);\n};\n\nexport const validateStacksAddress = (address: string): boolean => {\n  try {\n    c32addressDecode(address);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/** @ignore */\nexport function parseContractId(contractId: ContractIdString) {\n  const [address, name] = contractId.split('.');\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\n  return [address, name];\n}\n", "/**\n * Clarity type names used for the human-readable representation of Clarity values\n */\nexport enum ClarityType {\n  Int = 'int',\n  UInt = 'uint',\n  Buffer = 'buffer',\n  BoolTrue = 'true',\n  BoolFalse = 'false',\n  PrincipalStandard = 'address',\n  PrincipalContract = 'contract',\n  ResponseOk = 'ok',\n  ResponseErr = 'err',\n  OptionalNone = 'none',\n  OptionalSome = 'some',\n  List = 'list',\n  Tuple = 'tuple',\n  StringASCII = 'ascii',\n  StringUTF8 = 'utf8',\n}\n\n/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityWireType {\n  int = 0x00,\n  uint = 0x01,\n  buffer = 0x02,\n  true = 0x03,\n  false = 0x04,\n  address = 0x05,\n  contract = 0x06,\n  ok = 0x07,\n  err = 0x08,\n  none = 0x09,\n  some = 0x0a,\n  list = 0x0b,\n  tuple = 0x0c,\n  ascii = 0x0d,\n  utf8 = 0x0e,\n}\n\n/** @ignore internal for now */\nexport function clarityTypeToByte(type: ClarityType): ClarityWireType {\n  return ClarityWireType[type];\n}\n\n/** @ignore internal for now */\nexport function clarityByteToType(wireType: ClarityWireType): ClarityType {\n  return ClarityWireType[wireType] as ClarityType; // numerical enums are bidirectional in TypeScript\n}\n", "import {\n  BooleanCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n  NoneCV,\n  SomeCV,\n  TrueCV,\n  FalseCV,\n} from '.';\nimport { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, hexToBytes, utf8ToBytes } from '@stacks/common';\n\nexport type ClarityValue =\n  | BooleanCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | NoneCV\n  | SomeCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = bytesToAscii(hexToBytes(val.value));\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${val.value}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return val.value;\n    case ClarityType.List:\n      return `(list ${val.value.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.value)\n        .map(key => `(${key} ${cvToString(val.value[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.value}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.value}\"`;\n  }\n}\n\n/**\n * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when\n * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.\n * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.\n */\nexport function cvToValue(val: ClarityValue, strictJsonCompat: boolean = false): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      if (strictJsonCompat) {\n        return val.value.toString();\n      }\n      return val.value;\n    case ClarityType.Buffer:\n      return `0x${val.value}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return val.value;\n    case ClarityType.List:\n      return val.value.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.value).forEach(key => {\n        result[key] = cvToJSON(val.value[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.value;\n    case ClarityType.StringUTF8:\n      return val.value;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val, true) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${Math.ceil(val.value.length / 2)})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.value.length} ${\n        val.value.length ? getCVTypeString(val.value[0]) : 'UnknownType'\n      })`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.value)\n        .map(key => `(${key} ${getCVTypeString(val.value[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${asciiToBytes(val.value).length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${utf8ToBytes(val.value).length})`;\n  }\n}\n\ntype ClarityTypetoValue = {\n  [ClarityType.OptionalNone]: NoneCV;\n  [ClarityType.OptionalSome]: SomeCV;\n  [ClarityType.ResponseOk]: ResponseOkCV;\n  [ClarityType.ResponseErr]: ResponseErrorCV;\n  [ClarityType.BoolTrue]: TrueCV;\n  [ClarityType.BoolFalse]: FalseCV;\n  [ClarityType.Int]: IntCV;\n  [ClarityType.UInt]: UIntCV;\n  [ClarityType.StringASCII]: StringAsciiCV;\n  [ClarityType.StringUTF8]: StringUtf8CV;\n  [ClarityType.PrincipalStandard]: StandardPrincipalCV;\n  [ClarityType.PrincipalContract]: ContractPrincipalCV;\n  [ClarityType.List]: ListCV;\n  [ClarityType.Tuple]: TupleCV;\n  [ClarityType.Buffer]: BufferCV;\n};\n\n/**\n * Narrow down the type of a generic ClarityValue\n * @example\n * ```ts\n * // some functions can return a generic `ClarityValue` type\n * let value = callReadOnlyFunction();\n * //  ^ ClarityValue\n * // use `isClarityType` to narrow down the type\n * assert(isClarityType(value, ClarityType.Int))\n * console.log(value)\n * //          ^ IntCV\n * ```\n */\nexport function isClarityType<T extends ClarityType>(\n  input: ClarityValue,\n  withType: T\n): input is ClarityTypetoValue[T] {\n  return input.type === withType;\n}\n", "import { ClarityType } from '../constants';\nimport { BooleanCV } from '../types';\n\n/**\n * Converts true to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { trueCV } from '@stacks/transactions';\n *\n *  const trueCV = trueCV();\n *  // { type: 'true' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\n\n/**\n * Converts false to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { falseCV } from '@stacks/transactions';\n *\n *  const falseCV = falseCV();\n *  // { type: 'false' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\n/**\n * Converts a boolean to BooleanCV clarity type\n *\n * @returns {BooleanCV} returns instance of type BooleanCV\n *\n * @example\n * ```\n *  import { boolCV } from '@stacks/transactions';\n *\n *  const boolCV = boolCV(false);\n *  // { type: 'false' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const boolCV = (bool: boolean) => (bool ? trueCV() : falseCV());\n", "import { bytesToHex, utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\nimport { BufferCV } from '../types';\n\n/**\n * Converts a Uint8Array to a BufferCV clarity type\n *\n * @param {Uint8Array} buffer value to be converted to clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCV } from '@stacks/transactions';\n *\n *  const buffer = utf8ToBytes('this is a test');\n *  const buf = bufferCV(buffer);\n *  // { type: 'buffer', buffer: <Uint8Array 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const bufferCV = (buffer: Uint8Array): BufferCV => {\n  // max size 1024 * 1024 = 1MB; https://github.com/stacks-network/stacks-core/blob/c50a93088d7c0261f1dbe31ab24b95028a038447/clarity/src/vm/types/mod.rs#L47\n  if (buffer.byteLength > 1_048_576) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, value: bytesToHex(buffer) };\n};\n\n/**\n * Converts a string to BufferCV clarity type\n *\n * @param {str} string input to be converted to bufferCV clarity type\n *\n * @returns {BufferCV} returns instance of type BufferCV\n *\n * @example\n * ```\n *  import { bufferCVFromString } from '@stacks/transactions';\n *\n *  const str = 'this is a test';\n *  const buf = bufferCVFromString(str);\n *  // { type: 'buffer', buffer: <Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74> }\n *  const value = bytesToUtf8(buf.buffer);\n *  // this is a test\n *```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const bufferCVFromString = (str: string): BufferCV => bufferCV(utf8ToBytes(str));\n", "import {\n  IntegerType,\n  bytesToTwosBigInt,\n  hexToBytes,\n  intToBigInt,\n  isInstance,\n} from '@stacks/common';\nimport { ClarityType } from '../constants';\nimport { IntCV, UIntCV } from '../types';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array\n *  // { type: 'int', value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const intCV = (value: IntegerType): IntCV => {\n  // ensure compatibility with twos-complement encoded hex-strings\n  if (typeof value === 'string' && value.toLowerCase().startsWith('0x')) {\n    value = bytesToTwosBigInt(hexToBytes(value));\n  }\n\n  // ensure compatibility with twos-complement encoded byte arrays\n  if (isInstance(value, Uint8Array)) value = bytesToTwosBigInt(value);\n\n  const bigInt = intToBigInt(value);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array\n *  // { type: 'uint', value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n", "import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { ListCV } from '../types';\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue[]} list of ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} instance of type ListCV<T> of the provided values\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 'list', list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, value: values };\n}\n", "import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { NoneCV, OptionalCV } from '../types';\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 'none' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 'some', value: { type: 'true' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nexport function optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  return value ? someCV(value) : noneCV();\n}\n", "import { IntegerType, hexToBytes, intToBigInt } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport { ClarityType, ClarityValue, OptionalCV, PrincipalCV, principalCV } from '../clarity';\nimport {\n  AddressVersion,\n  COINBASE_BYTES_LENGTH,\n  ClarityVersion,\n  MAX_STRING_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  PayloadType,\n  PostConditionPrincipalId,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  TenureChangeCause,\n  VRF_PROOF_BYTES_LENGTH,\n} from '../constants';\nimport { exceedsMaxLengthBytes } from '../utils';\nimport {\n  AddressWire,\n  AssetWire,\n  CoinbasePayloadToAltRecipient,\n  CoinbasePayloadWire,\n  ContractCallPayload,\n  ContractPrincipalWire,\n  LengthPrefixedList,\n  LengthPrefixedStringWire,\n  MemoStringWire,\n  MessageSignatureWire,\n  NakamotoCoinbasePayloadWire,\n  PoisonPayloadWire,\n  SmartContractPayloadWire,\n  StacksWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TenureChangePayloadWire,\n  TokenTransferPayloadWire,\n  TransactionAuthFieldContentsWire,\n  TransactionAuthFieldWire,\n  VersionedSmartContractPayloadWire,\n} from './types';\n\nexport function createEmptyAddress(): AddressWire {\n  return {\n    type: StacksWireType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function createMemoString(content: string): MemoStringWire {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksWireType.MemoString, content };\n}\n\nexport function createLPList<T extends StacksWire>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList<T> {\n  return {\n    type: StacksWireType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function createMessageSignature(signature: string): MessageSignatureWire {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksWireType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: IntegerType,\n  memo?: string | MemoStringWire\n): TokenTransferPayloadWire {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount: intToBigInt(amount),\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | AddressWire,\n  contractName: string | LengthPrefixedStringWire,\n  functionName: string | LengthPrefixedStringWire,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress:\n      typeof contractAddress === 'string' ? createAddress(contractAddress) : contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport function codeBodyString(content: string): LengthPrefixedStringWire {\n  return createLPString(content, 4, 100_000);\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedStringWire,\n  codeBody: string | LengthPrefixedStringWire,\n  clarityVersion?: ClarityVersion\n): SmartContractPayloadWire | VersionedSmartContractPayloadWire {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  if (typeof clarityVersion === 'number') {\n    return {\n      type: StacksWireType.Payload,\n      payloadType: PayloadType.VersionedSmartContract,\n      clarityVersion,\n      contractName,\n      codeBody,\n    };\n  }\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport function createPoisonPayload(): PoisonPayloadWire {\n  return { type: StacksWireType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport function createCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  altRecipient?: PrincipalCV\n): CoinbasePayloadWire | CoinbasePayloadToAltRecipient {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (altRecipient != undefined) {\n    return {\n      type: StacksWireType.Payload,\n      payloadType: PayloadType.CoinbaseToAltRecipient,\n      coinbaseBytes,\n      recipient: altRecipient,\n    };\n  }\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.Coinbase,\n    coinbaseBytes,\n  };\n}\n\nexport function createNakamotoCoinbasePayload(\n  coinbaseBytes: Uint8Array,\n  recipient: OptionalCV<PrincipalCV>,\n  vrfProof: Uint8Array\n): NakamotoCoinbasePayloadWire {\n  if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n  }\n\n  if (vrfProof.byteLength != VRF_PROOF_BYTES_LENGTH) {\n    throw Error(`VRF proof buffer size must be ${VRF_PROOF_BYTES_LENGTH} bytes`);\n  }\n\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.NakamotoCoinbase,\n    coinbaseBytes,\n    recipient: recipient.type === ClarityType.OptionalSome ? recipient.value : undefined,\n    vrfProof,\n  };\n}\n\nexport function createTenureChangePayload(\n  tenureHash: string,\n  previousTenureHash: string,\n  burnViewHash: string,\n  previousTenureEnd: string,\n  previousTenureBlocks: number,\n  cause: TenureChangeCause,\n  publicKeyHash: string\n): TenureChangePayloadWire {\n  return {\n    type: StacksWireType.Payload,\n    payloadType: PayloadType.TenureChange,\n    tenureHash,\n    previousTenureHash,\n    burnViewHash,\n    previousTenureEnd,\n    previousTenureBlocks,\n    cause,\n    publicKeyHash,\n  };\n}\n\nexport function createLPString(content: string): LengthPrefixedStringWire;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number\n): LengthPrefixedStringWire;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedStringWire;\n/** @ignore */\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedStringWire {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n  }\n  return {\n    type: StacksWireType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\n/** @ignore */\nexport function createAsset(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetWire {\n  return {\n    type: StacksWireType.Asset,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\n/** @ignore */\nexport function createAddress(c32AddressString: string): AddressWire {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksWireType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\n/** @ignore */\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipalWire {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksWireType.Principal,\n    prefix: PostConditionPrincipalId.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\n/** @ignore */\nexport function createStandardPrincipal(addressString: string): StandardPrincipalWire {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksWireType.Principal,\n    prefix: PostConditionPrincipalId.Standard,\n    address: addr,\n  };\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContentsWire\n): TransactionAuthFieldWire {\n  return {\n    pubKeyEncoding,\n    type: StacksWireType.TransactionAuthField,\n    contents,\n  };\n}\n", "import { IntegerType } from '@stacks/common';\nimport { ClarityValue, PrincipalCV } from '../clarity';\nimport {\n  AddressVersion,\n  ClarityVersion,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionPrincipalId,\n  PostConditionType,\n  PubKeyEncoding,\n  TenureChangeCause,\n} from '../constants';\n\n// todo: add explicit enum values\n/**\n * The type of message that is being serialized.\n * Used internally for serializing and deserializing messages.\n */\nexport enum StacksWireType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  Asset,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\ntype WhenWireTypeMap<T> = Record<StacksWireType, T>;\n\nexport function whenWireType(wireType: StacksWireType) {\n  return <T>(wireTypeMap: WhenWireTypeMap<T>): T => wireTypeMap[wireType];\n}\n\nexport type StacksWire =\n  | AddressWire\n  | PostConditionPrincipalWire\n  | LengthPrefixedStringWire\n  | LengthPrefixedList\n  | PayloadWire\n  | MemoStringWire\n  | AssetWire\n  | PostConditionWire\n  | PublicKeyWire\n  | TransactionAuthFieldWire\n  | MessageSignatureWire;\n\nexport interface MemoStringWire {\n  readonly type: StacksWireType.MemoString;\n  readonly content: string;\n}\n\nexport interface PublicKeyWire {\n  readonly type: StacksWireType.PublicKey;\n  readonly data: Uint8Array;\n}\n\nexport interface LengthPrefixedList<TWire extends StacksWire = StacksWire> {\n  readonly type: StacksWireType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: TWire[];\n}\n\nexport interface AddressWire {\n  readonly type: StacksWireType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string; // todo: next rename to `hash` or `bytes` or `data`\n}\n\nexport interface MessageSignatureWire {\n  readonly type: StacksWireType.MessageSignature;\n  data: string;\n}\n\nexport type PayloadWire =\n  | TokenTransferPayloadWire\n  | ContractCallPayload\n  | SmartContractPayloadWire\n  | VersionedSmartContractPayloadWire\n  | PoisonPayloadWire\n  | CoinbasePayloadWire\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayloadWire\n  | TenureChangePayloadWire;\n\nexport interface TokenTransferPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: bigint;\n  readonly memo: MemoStringWire;\n}\n\nexport type PayloadInput =\n  | (\n      | TokenTransferPayloadWire\n      | (Omit<TokenTransferPayloadWire, 'amount'> & { amount: IntegerType })\n    )\n  | ContractCallPayload\n  | SmartContractPayloadWire\n  | VersionedSmartContractPayloadWire\n  | PoisonPayloadWire\n  | CoinbasePayloadWire\n  | CoinbasePayloadToAltRecipient\n  | NakamotoCoinbasePayloadWire\n  | TenureChangePayloadWire;\n\nexport interface ContractCallPayload {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly functionName: LengthPrefixedStringWire;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport interface SmartContractPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly codeBody: LengthPrefixedStringWire;\n}\n\nexport interface VersionedSmartContractPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.VersionedSmartContract;\n  readonly clarityVersion: ClarityVersion;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly codeBody: LengthPrefixedStringWire;\n}\n\nexport interface PoisonPayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport interface CoinbasePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBytes: Uint8Array;\n}\n\nexport interface CoinbasePayloadToAltRecipient {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.CoinbaseToAltRecipient;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient: PrincipalCV;\n}\n\nexport interface NakamotoCoinbasePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.NakamotoCoinbase;\n  readonly coinbaseBytes: Uint8Array;\n  readonly recipient?: PrincipalCV;\n  readonly vrfProof: Uint8Array;\n}\n\nexport interface TenureChangePayloadWire {\n  readonly type: StacksWireType.Payload;\n  readonly payloadType: PayloadType.TenureChange;\n  /**\n   * The consensus hash of this tenure (hex string). Corresponds to the\n   * sortition in which the miner of this block was chosen. It may be the case\n   * that this miner's tenure gets _extended_ acrosssubsequent sortitions; if\n   * this happens, then this `consensus_hash` value _remains the same _as the\n   * sortition in which the winning block-commit was mined.\n   */\n  readonly tenureHash: string;\n  /**\n   * The consensus hash (hex string) of the previous tenure.  Corresponds to the\n   * sortition of the previous winning block-commit.\n   */\n  readonly previousTenureHash: string;\n  /**\n   * Current consensus hash (hex string) on the underlying burnchain.\n   * Corresponds to the last-seen sortition.\n   */\n  readonly burnViewHash: string;\n  /** Stacks block hash (hex string) */\n  readonly previousTenureEnd: string;\n  /** The number of blocks produced since the last sortition-linked tenure */\n  readonly previousTenureBlocks: number;\n  /** The cause of change in mining tenure */\n  readonly cause: TenureChangeCause;\n  /** The public key hash of the current tenure (hex string) */\n  readonly publicKeyHash: string;\n}\n\n/** @ignore */\nexport interface OriginPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Origin;\n}\n\n/** @ignore */\nexport interface StandardPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Standard;\n  readonly address: AddressWire;\n}\n\n/** @ignore */\nexport interface ContractPrincipalWire {\n  readonly type: StacksWireType.Principal;\n  readonly prefix: PostConditionPrincipalId.Contract;\n  readonly address: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n}\n\n/** @ignore */\nexport interface LengthPrefixedStringWire {\n  readonly type: StacksWireType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\n/** @ignore */\nexport interface AssetWire {\n  readonly type: StacksWireType.Asset;\n  readonly address: AddressWire;\n  readonly contractName: LengthPrefixedStringWire;\n  readonly assetName: LengthPrefixedStringWire;\n}\n\n/** @ignore */\nexport interface STXPostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n}\n\n/** @ignore */\nexport interface FungiblePostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: bigint;\n  readonly asset: AssetWire;\n}\n\n/** @ignore */\nexport interface NonFungiblePostConditionWire {\n  readonly type: StacksWireType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipalWire;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly asset: AssetWire;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\n/** @ignore */\nexport type PostConditionWire =\n  | STXPostConditionWire\n  | FungiblePostConditionWire\n  | NonFungiblePostConditionWire;\n\n/** @ignore */\nexport type PostConditionPrincipalWire =\n  | OriginPrincipalWire\n  | StandardPrincipalWire\n  | ContractPrincipalWire;\n\nexport interface TransactionAuthFieldWire {\n  type: StacksWireType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContentsWire;\n}\n\nexport type TransactionAuthFieldContentsWire = PublicKeyWire | MessageSignatureWire;\n\n/** @see {@link AuthFieldType} */\nexport interface TransactionAuthFieldWire {\n  type: StacksWireType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContentsWire;\n}\n\n// todo: this file should hold the type definitions for more message types later\n// needed now to fix a circular dependency issue in structuredDataSignature\n\n/** @deprecated  */\nexport interface StructuredDataSignatureWire {\n  readonly type: StacksWireType.StructuredDataSignature;\n  data: string;\n}\n", "import { c32address } from 'c32check';\nimport { AddressHashMode, AddressVersion, PayloadType } from '../constants';\nimport { publicKeyIsCompressed } from '../keys';\nimport { AssetString } from '../types';\nimport { hashP2PKH, hashP2SH, hashP2WPKH, hashP2WSH } from '../utils';\nimport { createAsset, createContractPrincipal, createStandardPrincipal } from './create';\nimport { serializePublicKeyBytes } from './serialization';\nimport {\n  AddressWire,\n  AssetWire,\n  CoinbasePayloadWire,\n  ContractCallPayload,\n  ContractPrincipalWire,\n  PayloadWire,\n  PoisonPayloadWire,\n  PublicKeyWire,\n  SmartContractPayloadWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TokenTransferPayloadWire,\n} from './types';\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  // todo: `next` refactor to `requiredSignatures`, and opts object with network?\n  publicKeys: PublicKeyWire[]\n): AddressWire {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (\n    hashMode === AddressHashMode.P2WPKH ||\n    hashMode === AddressHashMode.P2WSH ||\n    hashMode === AddressHashMode.P2WSHNonSequential\n  ) {\n    if (!publicKeys.map(p => p.data).every(publicKeyIsCompressed)) {\n      throw Error('Public keys must be compressed for segwit');\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.P2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.P2WPKH:\n      return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n    case AddressHashMode.P2SH:\n    case AddressHashMode.P2SHNonSequential:\n      return addressFromVersionHash(\n        version,\n        hashP2SH(numSigs, publicKeys.map(serializePublicKeyBytes))\n      );\n    case AddressHashMode.P2WSH:\n    case AddressHashMode.P2WSHNonSequential:\n      return addressFromVersionHash(\n        version,\n        hashP2WSH(numSigs, publicKeys.map(serializePublicKeyBytes))\n      );\n  }\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): AddressWire {\n  return { type: StacksWireType.Address, version, hash160: hash };\n}\n\nexport function addressToString(address: AddressWire): string {\n  return c32address(address.version, address.hash160);\n}\n\nexport function isTokenTransferPayload(p: PayloadWire): p is TokenTransferPayloadWire {\n  return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p: PayloadWire): p is ContractCallPayload {\n  return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p: PayloadWire): p is SmartContractPayloadWire {\n  return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p: PayloadWire): p is PoisonPayloadWire {\n  return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p: PayloadWire): p is CoinbasePayloadWire {\n  return p.payloadType === PayloadType.Coinbase;\n}\n\n/** @ignore */\nexport function parseAssetString(id: AssetString): AssetWire {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const asset = createAsset(assetAddress, assetContractName, assetTokenName);\n  return asset;\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n * @ignore\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipalWire | ContractPrincipalWire {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n", "import {\n  bytesToHex,\n  bytesToUtf8,\n  concatArray,\n  hexToBytes,\n  hexToInt,\n  intToBigInt,\n  intToBytes,\n  intToHex,\n  isInstance,\n  utf8ToBytes,\n  writeUInt32BE,\n  writeUInt8,\n} from '@stacks/common';\nimport { BytesReader } from '../BytesReader';\nimport {\n  ClarityValue,\n  OptionalCV,\n  PrincipalCV,\n  deserializeCV,\n  noneCV,\n  serializeCVBytes,\n  someCV,\n} from '../clarity';\nimport {\n  AuthFieldType,\n  COINBASE_BYTES_LENGTH,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  ClarityVersion,\n  FungibleConditionCode,\n  STRING_MAX_LENGTH,\n  MEMO_MAX_LENGTH_BYTES,\n  NonFungibleConditionCode,\n  PayloadType,\n  PostConditionPrincipalId,\n  PostConditionType,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  TenureChangeCause,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  VRF_PROOF_BYTES_LENGTH,\n} from '../constants';\nimport { DeserializationError, SerializationError } from '../errors';\nimport { compressPublicKey, createStacksPublicKey, uncompressPublicKey } from '../keys';\nimport { rightPadHexToLength } from '../utils';\nimport {\n  createCoinbasePayload,\n  createContractCallPayload,\n  createLPList,\n  createLPString,\n  createMessageSignature,\n  createNakamotoCoinbasePayload,\n  createPoisonPayload,\n  createSmartContractPayload,\n  createTenureChangePayload,\n  createTokenTransferPayload,\n  createTransactionAuthField,\n} from './create';\nimport {\n  AddressWire,\n  AssetWire,\n  ContractPrincipalWire,\n  LengthPrefixedList,\n  LengthPrefixedStringWire,\n  MemoStringWire,\n  MessageSignatureWire,\n  OriginPrincipalWire,\n  PayloadInput,\n  PayloadWire,\n  PostConditionPrincipalWire,\n  PostConditionWire,\n  PublicKeyWire,\n  StacksWire,\n  StacksWireType,\n  StandardPrincipalWire,\n  TransactionAuthFieldWire,\n} from './types';\n\nexport function serializeStacksWire(wire: StacksWire): string {\n  return bytesToHex(serializeStacksWireBytes(wire));\n}\nexport function serializeStacksWireBytes(wire: StacksWire): Uint8Array {\n  switch (wire.type) {\n    case StacksWireType.Address:\n      return serializeAddressBytes(wire);\n    case StacksWireType.Principal:\n      return serializePrincipalBytes(wire);\n    case StacksWireType.LengthPrefixedString:\n      return serializeLPStringBytes(wire);\n    case StacksWireType.MemoString:\n      return serializeMemoStringBytes(wire);\n    case StacksWireType.Asset:\n      return serializeAssetBytes(wire);\n    case StacksWireType.PostCondition:\n      return serializePostConditionWireBytes(wire);\n    case StacksWireType.PublicKey:\n      return serializePublicKeyBytes(wire);\n    case StacksWireType.LengthPrefixedList:\n      return serializeLPListBytes(wire);\n    case StacksWireType.Payload:\n      return serializePayloadBytes(wire);\n    case StacksWireType.TransactionAuthField:\n      return serializeTransactionAuthFieldBytes(wire);\n    case StacksWireType.MessageSignature:\n      return serializeMessageSignatureBytes(wire);\n  }\n}\n\nexport function deserializeStacksWire(\n  bytesReader: string | Uint8Array | BytesReader,\n  type: StacksWireType,\n  listType?: StacksWireType\n): StacksWire {\n  switch (type) {\n    case StacksWireType.Address:\n      return deserializeAddress(bytesReader);\n    case StacksWireType.Principal:\n      return deserializePrincipal(bytesReader);\n    case StacksWireType.LengthPrefixedString:\n      return deserializeLPString(bytesReader);\n    case StacksWireType.MemoString:\n      return deserializeMemoString(bytesReader);\n    case StacksWireType.Asset:\n      return deserializeAsset(bytesReader);\n    case StacksWireType.PostCondition:\n      return deserializePostConditionWire(bytesReader);\n    case StacksWireType.PublicKey:\n      return deserializePublicKey(bytesReader);\n    case StacksWireType.Payload:\n      return deserializePayload(bytesReader);\n    case StacksWireType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No list type specified');\n      }\n      return deserializeLPList(bytesReader, listType);\n    case StacksWireType.MessageSignature:\n      return deserializeMessageSignature(bytesReader);\n    default:\n      throw new Error('Could not recognize StacksWireType');\n  }\n}\n\nexport function serializeAddress(address: AddressWire): string {\n  return bytesToHex(serializeAddressBytes(address));\n}\nexport function serializeAddressBytes(address: AddressWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n  bytesArray.push(hexToBytes(address.hash160));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAddress(serialized: string | Uint8Array | BytesReader): AddressWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n  const data = bytesToHex(bytesReader.readBytes(20));\n\n  return { type: StacksWireType.Address, version, hash160: data };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipalWire): string {\n  return bytesToHex(serializePrincipalBytes(principal));\n}\nexport function serializePrincipalBytes(principal: PostConditionPrincipalWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(principal.prefix);\n  if (\n    principal.prefix === PostConditionPrincipalId.Standard ||\n    principal.prefix === PostConditionPrincipalId.Contract\n  ) {\n    bytesArray.push(serializeAddressBytes(principal.address));\n  }\n  if (principal.prefix === PostConditionPrincipalId.Contract) {\n    bytesArray.push(serializeLPStringBytes(principal.contractName));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializePrincipal(\n  serialized: string | Uint8Array | BytesReader\n): PostConditionPrincipalWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalId, n => {\n    throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n  });\n  if (prefix === PostConditionPrincipalId.Origin) {\n    return { type: StacksWireType.Principal, prefix } as OriginPrincipalWire;\n  }\n  const address = deserializeAddress(bytesReader);\n  if (prefix === PostConditionPrincipalId.Standard) {\n    return { type: StacksWireType.Principal, prefix, address } as StandardPrincipalWire;\n  }\n  const contractName = deserializeLPString(bytesReader);\n  return {\n    type: StacksWireType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipalWire;\n}\n\nexport function serializeLPString(lps: LengthPrefixedStringWire): string {\n  return bytesToHex(serializeLPStringBytes(lps));\n}\nexport function serializeLPStringBytes(lps: LengthPrefixedStringWire): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(lps.content);\n  const length = contentBytes.byteLength;\n  bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n  bytesArray.push(contentBytes);\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPString(\n  serialized: string | Uint8Array | BytesReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedStringWire {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n  const content = bytesToUtf8(bytesReader.readBytes(length));\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function serializeMemoString(memoString: MemoStringWire): string {\n  return bytesToHex(serializeMemoStringBytes(memoString));\n}\nexport function serializeMemoStringBytes(memoString: MemoStringWire): Uint8Array {\n  const bytesArray = [];\n  const contentBytes = utf8ToBytes(memoString.content);\n  const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n  bytesArray.push(hexToBytes(paddedContent));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeMemoString(\n  serialized: string | Uint8Array | BytesReader\n): MemoStringWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  let content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n  content = content.replace(/\\u0000*$/, ''); // remove all trailing unicode null characters\n  return { type: StacksWireType.MemoString, content };\n}\n\nexport function serializeAsset(info: AssetWire): string {\n  return bytesToHex(serializeAssetBytes(info));\n}\nexport function serializeAssetBytes(info: AssetWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(serializeAddressBytes(info.address));\n  bytesArray.push(serializeLPStringBytes(info.contractName));\n  bytesArray.push(serializeLPStringBytes(info.assetName));\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAsset(serialized: string | Uint8Array | BytesReader): AssetWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  return {\n    type: StacksWireType.Asset,\n    address: deserializeAddress(bytesReader),\n    contractName: deserializeLPString(bytesReader),\n    assetName: deserializeLPString(bytesReader),\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): string {\n  return bytesToHex(serializeLPListBytes(lpList));\n}\nexport function serializeLPListBytes(lpList: LengthPrefixedList): Uint8Array {\n  const list = lpList.values;\n  const bytesArray = [];\n  bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n  for (const l of list) {\n    bytesArray.push(serializeStacksWireBytes(l));\n  }\n  return concatArray(bytesArray);\n}\n\nexport function deserializeLPList<\n  TType extends StacksWireType = StacksWireType,\n  TWire extends StacksWire = TType extends StacksWireType.Address\n    ? AddressWire\n    : TType extends StacksWireType.LengthPrefixedString\n      ? LengthPrefixedStringWire\n      : TType extends StacksWireType.MemoString\n        ? MemoStringWire\n        : TType extends StacksWireType.Asset\n          ? AssetWire\n          : TType extends StacksWireType.PostCondition\n            ? PostConditionWire\n            : TType extends StacksWireType.PublicKey\n              ? PublicKeyWire\n              : TType extends StacksWireType.TransactionAuthField\n                ? TransactionAuthFieldWire\n                : StacksWire,\n>(\n  serialized: string | Uint8Array | BytesReader,\n  type: TType,\n  lengthPrefixBytes?: number\n  // todo: `next` refactor for inversion of control\n): LengthPrefixedList<TWire> {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n\n  const l: StacksWire[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksWireType.Address:\n        l.push(deserializeAddress(bytesReader));\n        break;\n      case StacksWireType.LengthPrefixedString:\n        l.push(deserializeLPString(bytesReader));\n        break;\n      case StacksWireType.MemoString:\n        l.push(deserializeMemoString(bytesReader));\n        break;\n      case StacksWireType.Asset:\n        l.push(deserializeAsset(bytesReader));\n        break;\n      case StacksWireType.PostCondition:\n        l.push(deserializePostConditionWire(bytesReader));\n        break;\n      case StacksWireType.PublicKey:\n        l.push(deserializePublicKey(bytesReader));\n        break;\n      case StacksWireType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bytesReader));\n        break;\n    }\n  }\n  return createLPList<TWire>(l as TWire[], lengthPrefixBytes);\n}\n\nexport function serializePostConditionWire(postCondition: PostConditionWire): string {\n  return bytesToHex(serializePostConditionWireBytes(postCondition));\n}\n\nexport function serializePostConditionWireBytes(postCondition: PostConditionWire): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(postCondition.conditionType);\n  bytesArray.push(serializePrincipalBytes(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bytesArray.push(serializeAssetBytes(postCondition.asset));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bytesArray.push(serializeCVBytes(postCondition.assetName));\n  }\n\n  bytesArray.push(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    // SIP-005: Maximal length of amount is 8 bytes\n    if (postCondition.amount > BigInt('0xffffffffffffffff'))\n      throw new SerializationError('The post-condition amount may not be larger than 8 bytes');\n    bytesArray.push(intToBytes(postCondition.amount, 8));\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializePostConditionWire(\n  serialized: string | Uint8Array | BytesReader\n): PostConditionWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bytesReader);\n\n  let conditionCode;\n  let asset;\n  let amount: bigint;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      asset = deserializeAsset(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        asset: asset,\n      };\n    case PostConditionType.NonFungible:\n      asset = deserializeAsset(bytesReader);\n      const assetName = deserializeCV(bytesReader);\n      conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        asset,\n        assetName,\n      };\n  }\n}\n\nexport function serializePayload(payload: PayloadInput): string {\n  return bytesToHex(serializePayloadBytes(payload));\n}\n/** @ignore */\nexport function serializePayloadBytes(payload: PayloadInput): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bytesArray.push(serializeCVBytes(payload.recipient));\n      bytesArray.push(intToBytes(payload.amount, 8));\n      bytesArray.push(serializeStacksWireBytes(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bytesArray.push(serializeStacksWireBytes(payload.contractAddress));\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.functionName));\n      const numArgs = new Uint8Array(4);\n      writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n      bytesArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bytesArray.push(serializeCVBytes(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n      break;\n    case PayloadType.VersionedSmartContract:\n      bytesArray.push(payload.clarityVersion);\n      bytesArray.push(serializeStacksWireBytes(payload.contractName));\n      bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      break;\n    case PayloadType.CoinbaseToAltRecipient:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCVBytes(payload.recipient));\n      break;\n    case PayloadType.NakamotoCoinbase:\n      bytesArray.push(payload.coinbaseBytes);\n      bytesArray.push(serializeCVBytes(payload.recipient ? someCV(payload.recipient) : noneCV()));\n      bytesArray.push(payload.vrfProof);\n      break;\n    case PayloadType.TenureChange:\n      bytesArray.push(hexToBytes(payload.tenureHash));\n      bytesArray.push(hexToBytes(payload.previousTenureHash));\n      bytesArray.push(hexToBytes(payload.burnViewHash));\n      bytesArray.push(hexToBytes(payload.previousTenureEnd));\n      bytesArray.push(writeUInt32BE(new Uint8Array(4), payload.previousTenureBlocks));\n      bytesArray.push(writeUInt8(new Uint8Array(1), payload.cause));\n      bytesArray.push(hexToBytes(payload.publicKeyHash));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\n/** @ignore */\nexport function deserializePayload(serialized: string | Uint8Array | BytesReader): PayloadWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bytesReader) as PrincipalCV;\n      const amount = intToBigInt(bytesReader.readBytes(8));\n      const memo = deserializeMemoString(bytesReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bytesReader);\n      const contractCallName = deserializeLPString(bytesReader);\n      const functionName = deserializeLPString(bytesReader);\n      const functionArgs: ClarityValue[] = [];\n      const numberOfArgs = bytesReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bytesReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, 100_000);\n      return createSmartContractPayload(smartContractName, codeBody);\n\n    case PayloadType.VersionedSmartContract: {\n      const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n        throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n      });\n      const smartContractName = deserializeLPString(bytesReader);\n      const codeBody = deserializeLPString(bytesReader, 4, STRING_MAX_LENGTH);\n      return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n    }\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      return createCoinbasePayload(coinbaseBytes);\n    }\n    case PayloadType.CoinbaseToAltRecipient: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const altRecipient = deserializeCV(bytesReader) as PrincipalCV;\n      return createCoinbasePayload(coinbaseBytes, altRecipient);\n    }\n    case PayloadType.NakamotoCoinbase: {\n      const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n      const recipient = deserializeCV(bytesReader) as OptionalCV<PrincipalCV>;\n      const vrfProof = bytesReader.readBytes(VRF_PROOF_BYTES_LENGTH);\n      return createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof);\n    }\n    case PayloadType.TenureChange:\n      const tenureHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureHash = bytesToHex(bytesReader.readBytes(20));\n      const burnViewHash = bytesToHex(bytesReader.readBytes(20));\n      const previousTenureEnd = bytesToHex(bytesReader.readBytes(32));\n      const previousTenureBlocks = bytesReader.readUInt32BE();\n      const cause = bytesReader.readUInt8Enum(TenureChangeCause, n => {\n        throw new Error(`Cannot recognize TenureChangeCause: ${n}`);\n      });\n      const publicKeyHash = bytesToHex(bytesReader.readBytes(20));\n      return createTenureChangePayload(\n        tenureHash,\n        previousTenureHash,\n        burnViewHash,\n        previousTenureEnd,\n        previousTenureBlocks,\n        cause,\n        publicKeyHash\n      );\n  }\n}\n\n/** @ignore */\nexport function deserializeMessageSignature(\n  serialized: string | Uint8Array | BytesReader\n): MessageSignatureWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  return createMessageSignature(\n    bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  );\n}\n\n/** @ignore */\nexport function deserializeTransactionAuthField(\n  serialized: string | Uint8Array | BytesReader\n): TransactionAuthFieldWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bytesReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        createStacksPublicKey(uncompressPublicKey(deserializePublicKey(bytesReader).data))\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bytesReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignatureWire): string {\n  return bytesToHex(serializeMessageSignatureBytes(messageSignature));\n}\n/** @ignore */\nexport function serializeMessageSignatureBytes(messageSignature: MessageSignatureWire): Uint8Array {\n  return hexToBytes(messageSignature.data);\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthFieldWire): string {\n  return bytesToHex(serializeTransactionAuthFieldBytes(field));\n}\n/** @ignore */\nexport function serializeTransactionAuthFieldBytes(field: TransactionAuthFieldWire): Uint8Array {\n  const bytesArray = [];\n\n  switch (field.contents.type) {\n    case StacksWireType.PublicKey:\n      bytesArray.push(\n        field.pubKeyEncoding === PubKeyEncoding.Compressed\n          ? AuthFieldType.PublicKeyCompressed\n          : AuthFieldType.PublicKeyUncompressed\n      );\n      bytesArray.push(hexToBytes(compressPublicKey(field.contents.data)));\n      break;\n    case StacksWireType.MessageSignature:\n      bytesArray.push(\n        field.pubKeyEncoding === PubKeyEncoding.Compressed\n          ? AuthFieldType.SignatureCompressed\n          : AuthFieldType.SignatureUncompressed\n      );\n      bytesArray.push(serializeMessageSignatureBytes(field.contents));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function serializePublicKey(key: PublicKeyWire): string {\n  return bytesToHex(serializePublicKeyBytes(key));\n}\n\n/** @ignore */\nexport function serializePublicKeyBytes(key: PublicKeyWire): Uint8Array {\n  return key.data.slice();\n}\n\n/** @ignore */\nexport function deserializePublicKey(serialized: string | Uint8Array | BytesReader): PublicKeyWire {\n  const bytesReader = isInstance(serialized, BytesReader)\n    ? serialized\n    : new BytesReader(serialized);\n  const fieldId = bytesReader.readUInt8();\n  const keyLength =\n    fieldId === 4 ? UNCOMPRESSED_PUBKEY_LENGTH_BYTES : COMPRESSED_PUBKEY_LENGTH_BYTES;\n  return createStacksPublicKey(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n", "import { utf8ToBytes } from '@stacks/common';\nimport {\n  AddressWire,\n  LengthPrefixedStringWire,\n  addressToString,\n  createAddress,\n  createLPString,\n} from '../../wire';\nimport { ClarityType } from '../constants';\nimport { ContractPrincipalCV, PrincipalCV, StandardPrincipalCV } from '../types';\n\nexport function principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 'address', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, value: addressToString(addr) };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 'address', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function standardPrincipalCVFromAddress(address: AddressWire): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, value: addressToString(address) };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} string containing contract name\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 'contract', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function contractPrincipalCV(\n  addressString: string,\n  contractName: string\n): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} contract name of type LengthPrefixedString\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 'contract', address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function contractPrincipalCVFromAddress(\n  address: AddressWire,\n  contractName: LengthPrefixedStringWire\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return {\n    type: ClarityType.PrincipalContract,\n    value: `${addressToString(address)}.${contractName.content}`,\n  };\n}\n\nexport function contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  return {\n    type: ClarityType.PrincipalContract,\n    value: `${sp.value}.${contractName}`,\n  };\n}\n", "import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { ResponseErrorCV, ResponseOkCV } from '../types';\n\n/**\n * Converts ClarityValue to responseErrorCV\n *\n * @param {value} ClarityValue value to be converted to responseErrorCV clarity type\n *\n * @returns {responseErrorCV} returns instance of type responseErrorCV\n *\n * @example\n * ```\n *  import { responseErrorCV, intCV } from '@stacks/transactions';\n *\n *  const respErrorCV = responseErrorCV(intCV(1));\n *\n *  // { type: 'err', value: { type: 'int', value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function responseErrorCV<T extends ClarityValue = ClarityValue>(\n  value: T\n): ResponseErrorCV<T> {\n  return { type: ClarityType.ResponseErr, value };\n}\n\n/**\n * Converts ClarityValue to ResponseOkCV\n *\n * @param {value} ClarityValue value to be converted to ResponseOkCV clarity type\n *\n * @returns {ResponseOkCV} returns instance of type ResponseOkCV\n *\n * @example\n * ```\n *  import { responseOkCV, intCV } from '@stacks/transactions';\n *\n *  const respOKCV = responseOkCV(intCV(1));\n *\n *  // { type: 'ok', value: { type: 'int', value: 1n } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function responseOkCV<T extends ClarityValue = ClarityValue>(value: T): ResponseOkCV<T> {\n  return { type: ClarityType.ResponseOk, value };\n}\n", "import { ClarityType } from '../constants';\nimport { StringAsciiCV, StringUtf8CV } from '../types';\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 'ascii', data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, value: data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 'utf8', data: 'hello' }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport const stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, value: data };\n};\n\n/**\n * @ignore\n */\nexport const stringCV = (\n  data: string,\n  encoding: 'ascii' | 'utf8'\n): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringUtf8CV(data);\n  }\n};\n", "import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\nimport { TupleCV, TupleData } from '../types';\n\n/**\n * Create tuple of clarity values\n *\n * @param {tupleData} tuple value to be converted to tuple of clarity types\n *\n * @returns {TupleCV} returns instance of type clarity tuple\n *\n * @example\n * ```\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\n *\n *  const tuple = tupleCV({\n *    c: trueCV(),\n *    b: falseCV(),\n *    a: trueCV(),\n *  });\n *  // { type: 'tuple', data: { c: { type: 'true' }, b: { type: 'false' }, a: { type: 'true' } } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function tupleCV<T extends ClarityValue = ClarityValue>(\n  data: TupleData<T>\n): TupleCV<TupleData<T>> {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, value: data };\n}\n", "import { bytesToAscii, bytesToTwosBigInt, bytesToUtf8, hexToBytes } from '@stacks/common';\nimport {\n  ClarityValue,\n  ClarityWireType,\n  bufferCV,\n  contractPrincipalCVFromAddress,\n  falseCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  someCV,\n  standardPrincipalCVFromAddress,\n  stringAsciiCV,\n  stringUtf8CV,\n  trueCV,\n  tupleCV,\n  uintCV,\n} from '.';\nimport { BytesReader } from '../BytesReader';\nimport { DeserializationError } from '../errors';\nimport { deserializeAddress, deserializeLPString } from '../wire';\n\n/**\n * Deserializes clarity value to clarity type\n * @example\n * ```\n *  import { intCV, serializeCV, deserializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *\n *  // <Uint8Array 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 64>\n *\n *  const deserialized = deserializeCV(serialized);\n *  // { type: 0, value: 100n }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function deserializeCV<T extends ClarityValue = ClarityValue>(\n  serializedClarityValue: BytesReader | Uint8Array | string\n): T {\n  let bytesReader: BytesReader;\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bytesReader = new BytesReader(\n      hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue)\n    );\n  } else if (serializedClarityValue instanceof Uint8Array) {\n    bytesReader = new BytesReader(serializedClarityValue);\n  } else {\n    bytesReader = serializedClarityValue;\n  }\n  const type = bytesReader.readUInt8Enum(ClarityWireType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityWireType.int:\n      return intCV(bytesToTwosBigInt(bytesReader.readBytes(16))) as T;\n\n    case ClarityWireType.uint:\n      return uintCV(bytesReader.readBytes(16)) as T;\n\n    case ClarityWireType.buffer:\n      const bufferLength = bytesReader.readUInt32BE();\n      return bufferCV(bytesReader.readBytes(bufferLength)) as T;\n\n    case ClarityWireType.true:\n      return trueCV() as T;\n\n    case ClarityWireType.false:\n      return falseCV() as T;\n\n    case ClarityWireType.address:\n      const sAddress = deserializeAddress(bytesReader);\n      return standardPrincipalCVFromAddress(sAddress) as T;\n\n    case ClarityWireType.contract:\n      const cAddress = deserializeAddress(bytesReader);\n      const contractName = deserializeLPString(bytesReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName) as T;\n\n    case ClarityWireType.ok:\n      return responseOkCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.err:\n      return responseErrorCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.none:\n      return noneCV() as T;\n\n    case ClarityWireType.some:\n      return someCV(deserializeCV(bytesReader)) as T;\n\n    case ClarityWireType.list:\n      const listLength = bytesReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bytesReader));\n      }\n      return listCV(listContents) as T;\n\n    case ClarityWireType.tuple:\n      const tupleLength = bytesReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bytesReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bytesReader);\n      }\n      return tupleCV(tupleContents) as T;\n\n    case ClarityWireType.ascii:\n      const asciiStrLen = bytesReader.readUInt32BE();\n      const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n      return stringAsciiCV(asciiStr) as T;\n\n    case ClarityWireType.utf8:\n      const utf8StrLen = bytesReader.readUInt32BE();\n      const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n      return stringUtf8CV(utf8Str) as T;\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.'\n      );\n  }\n}\n", "import {\n  asciiToBytes,\n  bigIntToBytes,\n  bytesToHex,\n  concatArray,\n  concatBytes,\n  hexToBytes,\n  toTwos,\n  utf8ToBytes,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  BooleanCV,\n  BufferCV,\n  ClarityValue,\n  ContractPrincipalCV,\n  IntCV,\n  OptionalCV,\n  ResponseCV,\n  StandardPrincipalCV,\n  UIntCV,\n} from '.';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\nimport { SerializationError } from '../errors';\nimport { parseContractId } from '../utils';\nimport {\n  createAddress,\n  createLPString,\n  serializeAddressBytes,\n  serializeLPStringBytes,\n} from '../wire';\nimport { ClarityType, clarityTypeToByte } from './constants';\nimport { ListCV, StringAsciiCV, StringUtf8CV, TupleCV } from './types';\n\nfunction bytesWithTypeID(typeId: ClarityType, bytes: Uint8Array): Uint8Array {\n  return concatArray([clarityTypeToByte(typeId), bytes]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Uint8Array {\n  return new Uint8Array([clarityTypeToByte(value.type)]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Uint8Array {\n  if (cv.type === ClarityType.OptionalNone) {\n    return new Uint8Array([clarityTypeToByte(cv.type)]);\n  } else {\n    return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Uint8Array {\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Math.ceil(cv.value.length / 2), 0);\n  return bytesWithTypeID(cv.type, concatBytes(length, hexToBytes(cv.value)));\n}\n\nfunction serializeIntCV(cv: IntCV): Uint8Array {\n  const bytes = bigIntToBytes(\n    toTwos(BigInt(cv.value), BigInt(CLARITY_INT_SIZE)),\n    CLARITY_INT_BYTE_SIZE\n  );\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeUIntCV(cv: UIntCV): Uint8Array {\n  const bytes = bigIntToBytes(BigInt(cv.value), CLARITY_INT_BYTE_SIZE);\n  return bytesWithTypeID(cv.type, bytes);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Uint8Array {\n  return bytesWithTypeID(cv.type, serializeAddressBytes(createAddress(cv.value)));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Uint8Array {\n  const [address, name] = parseContractId(cv.value);\n  return bytesWithTypeID(\n    cv.type,\n    concatBytes(\n      serializeAddressBytes(createAddress(address)),\n      serializeLPStringBytes(createLPString(name))\n    )\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, cv.value.length, 0);\n  bytesArray.push(length);\n\n  for (const value of cv.value) {\n    const serializedValue = serializeCVBytes(value);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const bytesArray = [];\n\n  const length = new Uint8Array(4);\n  writeUInt32BE(length, Object.keys(cv.value).length, 0);\n  bytesArray.push(length);\n\n  const lexicographicOrder = Object.keys(cv.value).sort((a, b) => a.localeCompare(b));\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    bytesArray.push(serializeLPStringBytes(nameWithLength));\n\n    const serializedValue = serializeCVBytes(cv.value[key]);\n    bytesArray.push(serializedValue);\n  }\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const bytesArray = [];\n\n  const str = encoding == 'ascii' ? asciiToBytes(cv.value) : utf8ToBytes(cv.value);\n  const len = new Uint8Array(4);\n  writeUInt32BE(len, str.length, 0);\n\n  bytesArray.push(len);\n  bytesArray.push(str);\n\n  return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\n/**\n * Serializes clarity value to hex\n * @example\n * ```\n *  import { intCV, serializeCV } from '@stacks/transactions';\n *\n *  const serialized = serializeCV(intCV(100)); // Similarly works for other clarity types as well like listCV, booleanCV ...\n *  // '0000000000000000000000000000000064'\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nexport function serializeCV(value: ClarityValue): string {\n  return bytesToHex(serializeCVBytes(value));\n}\n\n/** @ignore */\nexport function serializeCVBytes(value: ClarityValue): Uint8Array {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.UInt:\n      return serializeUIntCV(value);\n    case ClarityType.Int:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n", "import { Cl, ClarityValue, ListCV, TupleCV } from '..';\n\n// COMBINATOR TYPES\ntype Combinator = (str: string) => ParseResult;\n\ntype ParseResult = ParseSuccess | ParseFail;\n\ntype Capture = ClarityValue | string;\n\ninterface ParseSuccess {\n  success: true;\n  value: string;\n  rest: string;\n  capture?: Capture;\n}\n\ninterface ParseFail {\n  success: false;\n}\n\n// GENERAL COMBINATORS\nfunction regex(pattern: RegExp, map?: (value: string) => ClarityValue): Combinator {\n  return (s: string) => {\n    const match = s.match(pattern);\n    if (!match || match.index !== 0) return { success: false };\n    return {\n      success: true,\n      value: match[0],\n      rest: s.substring(match[0].length),\n      capture: map ? map(match[0]) : undefined,\n    };\n  };\n}\n\nfunction whitespace(): Combinator {\n  return regex(/\\s+/);\n}\n\nfunction lazy(c: () => Combinator): Combinator {\n  return (s: string) => c()(s);\n}\n\nfunction either(combinators: Combinator[]): Combinator {\n  return (s: string) => {\n    for (const c of combinators) {\n      const result = c(s);\n      if (result.success) return result;\n    }\n    return { success: false };\n  };\n}\n\nfunction entire(combinator: Combinator): Combinator {\n  return (s: string) => {\n    const result = combinator(s);\n    if (!result.success || result.rest) return { success: false };\n    return result;\n  };\n}\n\nfunction optional(c: Combinator): Combinator {\n  return (s: string) => {\n    const result = c(s);\n    if (result.success) return result;\n    return {\n      success: true,\n      value: '',\n      rest: s,\n    };\n  };\n}\n\nfunction sequence(\n  combinators: Combinator[],\n  reduce: (values: Capture[]) => Capture = v => v[0]\n): Combinator {\n  return (s: string) => {\n    let rest = s;\n    let value = '';\n    const captures: Capture[] = [];\n\n    for (const c of combinators) {\n      const result = c(rest);\n      if (!result.success) return { success: false };\n\n      rest = result.rest;\n      value += result.value;\n      if (result.capture) captures.push(result.capture);\n    }\n\n    return {\n      success: true,\n      value,\n      rest,\n      capture: reduce(captures),\n    };\n  };\n}\n\nfunction chain(\n  combinators: Combinator[],\n  reduce: (values: Capture[]) => Capture = v => v[0]\n): Combinator {\n  const joined = combinators.flatMap((combinator, index) =>\n    index === 0 ? [combinator] : [optional(whitespace()), combinator]\n  );\n  return sequence(joined, reduce);\n}\n\nfunction parens(combinator: Combinator): Combinator {\n  return chain([regex(/\\(/), combinator, regex(/\\)/)]);\n}\n\nfunction greedy(\n  min: number,\n  combinator: Combinator,\n  reduce: (values: Capture[]) => Capture = v => v[v.length - 1],\n  separator?: Combinator\n): Combinator {\n  return (s: string) => {\n    let rest = s;\n    let value = '';\n    const captures: Capture[] = [];\n\n    let count;\n    for (count = 0; ; count++) {\n      const result = combinator(rest);\n      if (!result.success) break;\n      rest = result.rest;\n      value += result.value;\n      if (result.capture) captures.push(result.capture);\n\n      if (separator) {\n        const sepResult = separator(rest);\n        if (!sepResult.success) {\n          count++; // count as matched but no trailing separator\n          break;\n        }\n        rest = sepResult.rest;\n        value += sepResult.value;\n      }\n    }\n\n    if (count < min) return { success: false };\n    return {\n      success: true,\n      value,\n      rest,\n      capture: reduce(captures),\n    };\n  };\n}\n\nfunction capture(combinator: Combinator, map?: (value: string) => Capture): Combinator {\n  return (s: string) => {\n    const result = combinator(s);\n    if (!result.success) return { success: false };\n    return {\n      success: true,\n      value: result.value,\n      rest: result.rest,\n      capture: map ? map(result.value) : result.value,\n    };\n  };\n}\n\n// CLARITY VALUE PARSERS\nfunction clInt(): Combinator {\n  return capture(regex(/\\-?[0-9]+/), v => Cl.int(parseInt(v)));\n}\n\nfunction clUint(): Combinator {\n  return sequence([regex(/u/), capture(regex(/[0-9]+/), v => Cl.uint(parseInt(v)))]);\n}\n\nfunction clBool(): Combinator {\n  return capture(regex(/true|false/), v => Cl.bool(v === 'true'));\n}\n\nfunction clPrincipal(): Combinator {\n  return sequence([\n    regex(/\\'/),\n    capture(\n      sequence([regex(/[A-Z0-9]+/), optional(sequence([regex(/\\./), regex(/[a-zA-Z0-9\\-]+/)]))]),\n      Cl.address\n    ),\n  ]);\n}\n\nfunction clBuffer(): Combinator {\n  return sequence([regex(/0x/), capture(regex(/[0-9a-fA-F]+/), Cl.bufferFromHex)]);\n}\n\n/** @ignore helper for string values, removes escaping and unescapes special characters */\nfunction unescape(input: string): string {\n  // To correctly unescape sequences like \\n, \\t, \\\", \\\\, \\uXXXX, etc.,\n  // we can leverage JSON.parse by wrapping the input string in double quotes.\n  // This ensures that all standard JSON escape sequences are handled according\n  // to the JSON specification, aligning with the test cases provided.\n  try {\n    return JSON.parse(`\"${input}\"`);\n  } catch (error) {\n    throw new Error(\n      `Failed to unescape string: \"${input}\" ${error instanceof Error ? error.message : error}`\n    );\n  }\n}\n\nfunction clAscii(): Combinator {\n  return sequence([\n    regex(/\"/),\n    capture(regex(/(\\\\.|[^\"])*/), t => Cl.stringAscii(unescape(t))),\n    regex(/\"/),\n  ]);\n}\n\nfunction clUtf8(): Combinator {\n  return sequence([\n    regex(/u\"/),\n    capture(regex(/(\\\\.|[^\"])*/), t => Cl.stringUtf8(unescape(t))),\n    regex(/\"/),\n  ]);\n}\n\nfunction clList(): Combinator {\n  return parens(\n    sequence([\n      regex(/list/),\n      greedy(0, sequence([whitespace(), clValue()]), c => Cl.list(c as ClarityValue[])),\n    ])\n  );\n}\n\nfunction clTuple(): Combinator {\n  const tupleCurly = chain([\n    regex(/\\{/),\n    greedy(\n      1,\n      // entries\n      sequence(\n        [\n          capture(regex(/[a-zA-Z][a-zA-Z0-9_]*/)), // key\n          regex(/\\s*\\:/),\n          whitespace(), // todo: can this be optional?\n          clValue(), // value\n        ],\n        ([k, v]) => Cl.tuple({ [k as string]: v as ClarityValue })\n      ),\n      c => Cl.tuple(Object.assign({}, ...c.map(t => (t as TupleCV).value))),\n      regex(/\\s*\\,\\s*/)\n    ),\n    regex(/\\}/),\n  ]);\n  const tupleFunction = parens(\n    sequence([\n      optional(whitespace()),\n      regex(/tuple/),\n      whitespace(),\n      greedy(\n        1,\n        parens(\n          // entries\n          sequence(\n            [\n              optional(whitespace()),\n              capture(regex(/[a-zA-Z][a-zA-Z0-9_]*/)), // key\n              whitespace(),\n              clValue(), // value\n              optional(whitespace()),\n            ],\n            ([k, v]) => Cl.tuple({ [k as string]: v as ClarityValue })\n          )\n        ),\n        c => Cl.tuple(Object.assign({}, ...c.map(t => (t as TupleCV).value))),\n        whitespace()\n      ),\n    ])\n  );\n  return either([tupleCurly, tupleFunction]);\n}\n\nfunction clNone(): Combinator {\n  return capture(regex(/none/), Cl.none);\n}\n\nfunction clSome(): Combinator {\n  return parens(\n    sequence([regex(/some/), whitespace(), clValue()], c => Cl.some(c[0] as ClarityValue))\n  );\n}\n\nfunction clOk(): Combinator {\n  return parens(sequence([regex(/ok/), whitespace(), clValue()], c => Cl.ok(c[0] as ClarityValue)));\n}\n\nfunction clErr(): Combinator {\n  return parens(\n    sequence([regex(/err/), whitespace(), clValue()], c => Cl.error(c[0] as ClarityValue))\n  );\n}\n\nfunction clValue(map: (combinator: Combinator) => Combinator = v => v) {\n  return either(\n    [\n      clBuffer,\n      clAscii,\n      clUtf8,\n      clInt,\n      clUint,\n      clBool,\n      clPrincipal,\n      clList,\n      clTuple,\n      clNone,\n      clSome,\n      clOk,\n      clErr,\n    ]\n      .map(lazy)\n      .map(map)\n  );\n}\n\n/**\n * Parse a piece of string text as Clarity value syntax.\n * Supports all Clarity value types (primitives, sequences, composite types).\n *\n * @example\n * ```\n * const repr = Cl.parse(\"u4\");\n * const repr = Cl.parse(`\"hello\"`);\n * const repr = Cl.parse('(tuple (a 1) (b 2))');\n * ```\n */\nexport function parse(clarityValueString: string): ClarityValue {\n  const result = clValue(entire)(clarityValueString);\n  if (!result.success || !result.capture) throw 'Parse error'; // todo: we can add better error messages and add position tracking\n  return result.capture as ClarityValue;\n}\n\n/** @ignore Meant for internal use by other Stacks.js packages. Not stable. */\nexport function internal_parseCommaSeparated(clarityValueString: string): ClarityValue[] {\n  const combinator = entire(\n    greedy(1, clValue(), c => Cl.list(c as ClarityValue[]), regex(/\\s*,\\s*/))\n  );\n  const result = combinator(clarityValueString);\n  if (!result.success || !result.capture)\n    throw `Error trying to parse string: ${clarityValueString}`;\n  return (result.capture as ListCV<ClarityValue>).value;\n}\n", "import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  PrivateKey,\n  PublicKey,\n  writeUInt16BE,\n} from '@stacks/common';\nimport { BytesReader } from './BytesReader';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n} from './constants';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport {\n  createStacksPublicKey,\n  privateKeyToPublic,\n  publicKeyFromSignatureVrs,\n  publicKeyIsCompressed,\n  signWithKey,\n} from './keys';\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  deserializeMessageSignature,\n  MessageSignatureWire,\n  PublicKeyWire,\n  serializeLPListBytes,\n  serializeMessageSignatureBytes,\n  StacksWireType,\n  TransactionAuthFieldWire,\n} from './wire';\n\nexport function emptyMessageSignature(): MessageSignatureWire {\n  return {\n    type: StacksWireType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignatureWire;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthFieldWire[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSpendingCondition(\n  options:\n    | {\n        // Single-sig\n        publicKey: string;\n        nonce: IntegerType;\n        fee: IntegerType;\n      }\n    | {\n        // Multi-sig\n        publicKeys: string[];\n        numSignatures: number;\n        nonce: IntegerType;\n        fee: IntegerType;\n      }\n) {\n  if ('publicKey' in options) {\n    return createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  }\n  // multi-sig\n  return createMultiSigSpendingCondition(\n    AddressHashMode.P2SH,\n    options.numSignatures,\n    options.publicKeys,\n    options.nonce,\n    options.fee\n  );\n}\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: PublicKey,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    1,\n    [createStacksPublicKey(pubKey)]\n  ).hash160;\n  const keyEncoding = publicKeyIsCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce),\n    fee: intToBigInt(fee),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    stacksPublicKeys\n  ).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce),\n    fee: intToBigInt(fee),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\n/** Advanced: Checks if the condition is a single signature spending condition. */\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\n// todo: add override for the functions below to allow for address string input as well.\n\n/** Advanced: Checks if the address is for a sequential (legacy) multi-signature spending condition. */\nexport function isSequentialMultiSig(hashMode: AddressHashMode): boolean {\n  return hashMode === AddressHashMode.P2SH || hashMode === AddressHashMode.P2WSH;\n}\n\n/** Advanced: Checks if the address is for a non-sequential multi-signature spending condition. */\nexport function isNonSequentialMultiSig(hashMode: AddressHashMode): boolean {\n  return (\n    hashMode === AddressHashMode.P2SHNonSequential ||\n    hashMode === AddressHashMode.P2WSHNonSequential\n  );\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): string {\n  return bytesToHex(serializeSingleSigSpendingConditionBytes(condition));\n}\n\nexport function serializeSingleSigSpendingConditionBytes(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, 8),\n    intToBytes(condition.fee, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignatureBytes(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): string {\n  return bytesToHex(serializeMultiSigSpendingConditionBytes(condition));\n}\n\nexport function serializeMultiSigSpendingConditionBytes(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, 8),\n    intToBytes(condition.fee, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPListBytes(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.P2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksWireType.TransactionAuthField)\n    .values as TransactionAuthFieldWire[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksWireType.PublicKey:\n        if (!publicKeyIsCompressed(field.contents.data)) haveUncompressed = true;\n        break;\n      case StacksWireType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (\n    haveUncompressed &&\n    (hashMode === AddressHashMode.P2WSH || hashMode === AddressHashMode.P2WSHNonSequential)\n  ) {\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n  }\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): string {\n  return bytesToHex(serializeSpendingConditionBytes(condition));\n}\n\nexport function serializeSpendingConditionBytes(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) return serializeSingleSigSpendingConditionBytes(condition);\n  return serializeMultiSigSpendingConditionBytes(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\n/** @ignore */\nexport function sigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, 8)) +\n    bytesToHex(intToBytes(nonce, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\n/** @internal */\nfunction sigHashPostSign(curSigHash: string, pubKey: PublicKeyWire, signature: string): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = publicKeyIsCompressed(pubKey.data)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: PrivateKey\n): {\n  nextSig: string;\n  nextSigHash: string;\n} {\n  const sigHashPre = sigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPre);\n  const publicKey = createStacksPublicKey(privateKeyToPublic(privateKey));\n  const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: string\n) {\n  const sigHashPre = sigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPre, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, '', 0, 0);\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature.data\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    1,\n    [pubKey]\n  ).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: PublicKeyWire[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    switch (field.contents.type) {\n      case StacksWireType.PublicKey:\n        if (!publicKeyIsCompressed(field.contents.data)) haveUncompressed = true;\n        publicKeys.push(field.contents);\n        break;\n      case StacksWireType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents.data\n        );\n\n        if (isSequentialMultiSig(condition.hashMode)) {\n          curSigHash = nextSigHash;\n        }\n\n        publicKeys.push(pubKey);\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n        break;\n    }\n  }\n\n  if (\n    (isSequentialMultiSig(condition.hashMode) && numSigs !== condition.signaturesRequired) ||\n    (isNonSequentialMultiSig(condition.hashMode) && numSigs < condition.signaturesRequired)\n  )\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (\n    haveUncompressed &&\n    (condition.hashMode === AddressHashMode.P2WSH ||\n      condition.hashMode === AddressHashMode.P2WSHNonSequential)\n  )\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.P2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard); // todo: should this be .Sponsored?\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce),\n    fee: intToBigInt(sponsorSpendingCondition.fee),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): string {\n  return bytesToHex(serializeAuthorizationBytes(auth));\n}\n\nexport function serializeAuthorizationBytes(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n      bytesArray.push(serializeSpendingConditionBytes(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n", "import { IntegerType, PrivateKey, PublicKey } from '@stacks/common';\nimport {\n  NetworkClientParam,\n  STACKS_MAINNET,\n  clientFromNetwork,\n  networkFrom,\n} from '@stacks/network';\nimport { c32address } from 'c32check';\nimport {\n  SpendingCondition,\n  createMultiSigSpendingCondition,\n  createSingleSigSpendingCondition,\n  createSponsoredAuth,\n  createStandardAuth,\n  isSingleSig,\n} from './authorization';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport {\n  AddressHashMode,\n  ClarityVersion,\n  MultiSigHashMode,\n  PayloadType,\n  PostConditionMode,\n  SingleSigHashMode,\n} from './constants';\nimport { ClarityAbi, validateContractCall } from './contract-abi';\nimport { fetchAbi, fetchFeeEstimate, fetchNonce } from './fetch';\nimport {\n  createStacksPublicKey,\n  privateKeyToHex,\n  privateKeyToPublic,\n  publicKeyToAddress,\n  publicKeyToHex,\n} from './keys';\nimport { postConditionModeFrom, postConditionToWire } from './postcondition';\nimport { PostCondition, PostConditionModeName } from './postcondition-types';\nimport { TransactionSigner } from './signer';\nimport { StacksTransactionWire, deriveNetworkFromTx } from './transaction';\nimport { omit } from './utils';\nimport {\n  PostConditionWire,\n  addressFromPublicKeys,\n  createAddress,\n  createContractCallPayload,\n  createLPList,\n  createSmartContractPayload,\n  createTokenTransferPayload,\n  deserializePostConditionWire,\n} from './wire';\n\n/** @deprecated Not used internally */\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\nexport interface UnsignedMultiSigOptions {\n  /** The minimum required signatures N (in a N of M multi-sig) */\n  numSignatures: number;\n  /** The M public-keys (in a N of M multi-sig), which together form the address of the multi-sig account */\n  publicKeys: PublicKey[];\n  /**\n   * The `address` of the multi-sig account.\n   * - If NOT provided, the public-key order is taken AS IS.\n   * - If provided, the address will be checked against the order of the public-keys (either AS IS or SORTED).\n   * The default is to SORT the public-keys (only if the `address` is provided).\n   */\n  address?: string;\n  /** @experimental Use newer non-sequential multi-sig hashmode for transaction. Future releases may make this the default. */\n  useNonSequentialMultiSig?: boolean;\n}\n\nexport type SignedMultiSigOptions = UnsignedMultiSigOptions & {\n  signerKeys: PrivateKey[];\n};\n\n/**\n * STX token transfer transaction options\n *\n * Note: Standard STX transfer does not allow post-conditions.\n */\nexport type TokenTransferOptions = {\n  /** the address of the recipient of the token transfer */\n  recipient: string | PrincipalCV;\n  /** the amount to be transfered in microstacks */\n  amount: IntegerType;\n  /** the transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** an arbitrary string to include in the transaction, must be less than 34 bytes */\n  memo?: string;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: PublicKey;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: PrivateKey;\n}\n\nexport type UnsignedMultiSigTokenTransferOptions = TokenTransferOptions & UnsignedMultiSigOptions;\n\nexport type SignedMultiSigTokenTransferOptions = TokenTransferOptions & SignedMultiSigOptions;\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promise<StacksTransactionWire>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    // no post conditions on STX transfers (see SIP-005)\n  });\n\n  if (txOptions.fee == null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce == null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n */\nexport type BaseContractDeployOptions = {\n  clarityVersion?: ClarityVersion;\n  contractName: string;\n  /** the Clarity code to be deployed */\n  codeBody: string;\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionModeName | PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: (PostCondition | PostConditionWire | string)[];\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedContractDeployOptions extends BaseContractDeployOptions {\n  /** a hex string of the public key of the transaction sender */\n  publicKey: PublicKey;\n}\n\nexport interface SignedContractDeployOptions extends BaseContractDeployOptions {\n  senderKey: PrivateKey;\n}\n\n/** @deprecated Use {@link SignedContractDeployOptions} or {@link UnsignedContractDeployOptions} instead. */\nexport interface ContractDeployOptions extends SignedContractDeployOptions {}\n\nexport type UnsignedMultiSigContractDeployOptions = BaseContractDeployOptions &\n  UnsignedMultiSigOptions;\n\nexport type SignedMultiSigContractDeployOptions = BaseContractDeployOptions & SignedMultiSigOptions;\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param {SignedContractDeployOptions | SignedMultiSigContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeContractDeploy(\n  txOptions: SignedContractDeployOptions | SignedMultiSigContractDeployOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractDeploy(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\nexport async function makeUnsignedContractDeploy(\n  txOptions: UnsignedContractDeployOptions | UnsignedMultiSigContractDeployOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n    clarityVersion: ClarityVersion.Clarity3,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n  options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n\n  const payload = createSmartContractPayload(\n    options.contractName,\n    options.codeBody,\n    options.clarityVersion\n  );\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const postConditions: PostConditionWire[] = (options.postConditions ?? []).map(pc => {\n    if (typeof pc === 'string') return deserializePostConditionWire(pc);\n    if (typeof pc.type === 'string') return postConditionToWire(pc);\n    return pc;\n  });\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    postConditions: lpPostConditions,\n    postConditionMode: options.postConditionMode,\n  });\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n */\nexport type ContractCallOptions = {\n  /** the Stacks address of the contract */\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** transaction fee in microstacks */\n  fee?: IntegerType;\n  /** the transaction nonce, which must be increased monotonically with each new transaction */\n  nonce?: IntegerType;\n  /** the post condition mode, specifying whether or not post-conditions must fully cover all\n   * transfered assets */\n  postConditionMode?: PostConditionModeName | PostConditionMode;\n  /** a list of post conditions to add to the transaction */\n  postConditions?: (PostCondition | PostConditionWire | string)[];\n  /** set to true to validate that the supplied function args match those specified in\n   * the published contract */\n  validateWithAbi?: boolean | ClarityAbi;\n  /** set to true if another account is sponsoring the transaction (covering the transaction fee) */\n  sponsored?: boolean;\n} & NetworkClientParam;\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: PrivateKey;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: PublicKey;\n}\n\nexport type UnsignedMultiSigContractCallOptions = ContractCallOptions & UnsignedMultiSigOptions;\n\nexport type SignedMultiSigContractCallOptions = ContractCallOptions & SignedMultiSigOptions;\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransactionWire>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: BigInt(0),\n    nonce: BigInt(0),\n    network: STACKS_MAINNET,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n  options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await fetchAbi({ ...options });\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition: SpendingCondition | null = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.P2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    const hashMode = options.useNonSequentialMultiSig\n      ? AddressHashMode.P2SHNonSequential\n      : AddressHashMode.P2SH;\n\n    const publicKeys = options.address\n      ? sortPublicKeysForAddress(\n          options.publicKeys.map(publicKeyToHex),\n          options.numSignatures,\n          hashMode,\n          createAddress(options.address).hash160\n        )\n      : options.publicKeys.map(publicKeyToHex);\n\n    spendingCondition = createMultiSigSpendingCondition(\n      hashMode,\n      options.numSignatures,\n      publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  const authorization = options.sponsored\n    ? createSponsoredAuth(spendingCondition)\n    : createStandardAuth(spendingCondition);\n\n  const postConditions: PostConditionWire[] = (options.postConditions ?? []).map(pc => {\n    if (typeof pc === 'string') return deserializePostConditionWire(pc);\n    if (typeof pc.type === 'string') return postConditionToWire(pc);\n    return pc;\n  });\n  const lpPostConditions = createLPList(postConditions);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion: options.network.transactionVersion,\n    chainId: options.network.chainId,\n    auth: authorization,\n    payload,\n    postConditions: lpPostConditions,\n    postConditionMode: options.postConditionMode,\n  });\n\n  if (txOptions.fee === undefined || txOptions.fee === null) {\n    const fee = await fetchFeeEstimate({ transaction, ...options });\n    transaction.setFee(fee);\n  }\n\n  if (txOptions.nonce === undefined || txOptions.nonce === null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await fetchNonce({ address, ...options });\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransactionWire}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransactionWire> {\n  if ('senderKey' in txOptions) {\n    // single-sig\n    const publicKey = privateKeyToPublic(txOptions.senderKey);\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = txOptions.senderKey;\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    // multi-sig\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    mutatingSignAppendMultiSig(\n      transaction,\n      txOptions.publicKeys.map(publicKeyToHex).slice(),\n      txOptions.signerKeys.map(privateKeyToHex),\n      txOptions.address\n    );\n\n    return transaction;\n  }\n}\n\n/**\n * Sponsored transaction options\n */\nexport type SponsorOptionsOpts = {\n  /** the origin-signed transaction */\n  transaction: StacksTransactionWire;\n  /** the sponsor's private key */\n  sponsorPrivateKey: PrivateKey;\n  /** the transaction fee amount to sponsor */\n  fee?: IntegerType;\n  /** the nonce of the sponsor account */\n  sponsorNonce?: IntegerType;\n  /** the hashmode of the sponsor's address */\n  sponsorAddressHashmode?: AddressHashMode;\n} & NetworkClientParam;\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param {SponsorOptionsOpts} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptionsOpts\n): Promise<StacksTransactionWire> {\n  const defaultOptions = {\n    fee: 0 as IntegerType,\n    sponsorNonce: 0 as IntegerType,\n    sponsorAddressHashmode: AddressHashMode.P2PKH as SingleSigHashMode,\n    network: deriveNetworkFromTx(sponsorOptions.transaction),\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n  options.network = networkFrom(options.network);\n  options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n\n  const sponsorPubKey = privateKeyToPublic(options.sponsorPrivateKey);\n\n  if (sponsorOptions.fee == null) {\n    let txFee: bigint | number = 0;\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n      case PayloadType.SmartContract:\n      case PayloadType.VersionedSmartContract:\n      case PayloadType.ContractCall:\n        txFee = BigInt(await fetchFeeEstimate({ ...options }));\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (sponsorOptions.sponsorNonce == null) {\n    const addressVersion = options.network.addressVersion.singleSig;\n    const address = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await fetchNonce({ address, ...options });\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    sponsorPubKey,\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = options.sponsorPrivateKey;\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return signer.transaction;\n}\n\n/** @internal multi-sig signing re-use */\nfunction mutatingSignAppendMultiSig(\n  /** **Warning:** method mutates `transaction` */\n  transaction: StacksTransactionWire,\n  publicKeys: string[],\n  signerKeys: string[],\n  address?: string\n) {\n  if (isSingleSig(transaction.auth.spendingCondition)) {\n    throw new Error('Transaction is not a multi-sig transaction');\n  }\n\n  const signer = new TransactionSigner(transaction);\n\n  const pubs = address\n    ? sortPublicKeysForAddress(\n        publicKeys,\n        transaction.auth.spendingCondition.signaturesRequired,\n        transaction.auth.spendingCondition.hashMode,\n        createAddress(address).hash160\n      )\n    : publicKeys;\n\n  // sign in order of public keys\n  for (const publicKey of pubs) {\n    const signerKey = signerKeys.find(key => privateKeyToPublic(key) === publicKey);\n    if (signerKey) {\n      // either sign and append message signature (which allows for recovering the public key)\n      signer.signOrigin(signerKey);\n    } else {\n      // or append the public key (which did not sign here)\n      signer.appendOrigin(publicKey);\n    }\n  }\n}\n\n/** @internal Get the matching public-keys array for a multi-sig address */\nfunction sortPublicKeysForAddress(\n  publicKeys: string[],\n  numSigs: number,\n  hashMode: MultiSigHashMode,\n  hash: string\n): string[] {\n  // unsorted\n  const hashUnsorted = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    publicKeys.map(createStacksPublicKey)\n  ).hash160;\n\n  if (hashUnsorted === hash) return publicKeys;\n\n  // sorted\n  const publicKeysSorted = publicKeys.slice().sort();\n  const hashSorted = addressFromPublicKeys(\n    0 as any, // only used for hash, so version doesn't matter\n    hashMode,\n    numSigs,\n    publicKeysSorted.map(createStacksPublicKey)\n  ).hash160;\n\n  if (hashSorted === hash) return publicKeysSorted;\n\n  throw new Error('Failed to find matching multi-sig address given public-keys.');\n}\n", "import { hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  ClarityType,\n  ClarityValue,\n  bufferCV,\n  bufferCVFromString,\n  contractPrincipalCV,\n  falseCV,\n  getCVTypeString,\n  intCV,\n  noneCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  trueCV,\n  uintCV,\n} from './clarity';\nimport { NotImplementedError } from './errors';\nimport { cloneDeep } from './utils';\nimport { ContractCallPayload } from './wire';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\n/**\n * Convert a string to a Clarity value based on the ABI type.\n *\n * Currently does NOT support some nested Clarity ABI types:\n * - ClarityAbiTypeResponse\n * - ClarityAbiTypeTuple\n * - ClarityAbiTypeList\n */\nexport function encodeAbiClarityValue(\n  value: string,\n  type: ClarityAbiType | ClarityAbiTypeUnion\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (value === 'false' || value === '0') return falseCV();\n      else if (value === 'true' || value === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(value)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (value.includes('.')) {\n        const [addr, name] = value.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(value);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = value.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(hexToBytes(value));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(value);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      return someCV(encodeAbiClarityValue(value, union.type.optional));\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\n\n/** @deprecated due to a breaking bug for the buffer encoding case, this was fixed and renamed to {@link clarityAbiStringToCV} */\nexport function encodeClarityValue(type: ClarityAbiType, value: string): ClarityValue;\nexport function encodeClarityValue(type: ClarityAbiTypeUnion, value: string): ClarityValue;\nexport function encodeClarityValue(\n  type: ClarityAbiTypeUnion | ClarityAbiType,\n  value: string\n): ClarityValue {\n  const union = (type as ClarityAbiTypeUnion).id\n    ? (type as ClarityAbiTypeUnion)\n    : getTypeUnion(type as ClarityAbiType);\n\n  if (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer) {\n    return bufferCV(utf8ToBytes(value)); // legacy behavior\n  }\n\n  return encodeAbiClarityValue(value, union);\n}\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: ClarityAbiType;\n  value: ClarityAbiType;\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= Math.ceil(cv.value.length / 2)\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.value.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.value.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length >= cv.value.length &&\n        cv.value.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.value);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = utf8ToBytes(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n", "import {\n  Hex,\n  IntegerType,\n  PrivateKey,\n  PublicKey,\n  bytesToHex,\n  concatArray,\n  intToBigInt,\n  isInstance,\n  writeUInt32BE,\n} from '@stacks/common';\nimport {\n  ChainId,\n  NetworkParam,\n  STACKS_MAINNET,\n  STACKS_TESTNET,\n  TransactionVersion,\n  networkFrom,\n  whenTransactionVersion,\n} from '@stacks/network';\nimport { serializePayloadBytes } from '.';\nimport { BytesReader } from './BytesReader';\nimport {\n  Authorization,\n  MultiSigSpendingCondition,\n  SpendingConditionOpts,\n  deserializeAuthorization,\n  intoInitialSighashAuth,\n  isSingleSig,\n  nextSignature,\n  serializeAuthorizationBytes,\n  setFee,\n  setNonce,\n  setSponsor,\n  setSponsorNonce,\n  verifyOrigin,\n} from './authorization';\nimport {\n  AddressHashMode,\n  AnchorMode,\n  AuthType,\n  PostConditionMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n} from './constants';\nimport { SerializationError, SigningError } from './errors';\nimport { createStacksPublicKey, privateKeyIsCompressed, publicKeyIsCompressed } from './keys';\nimport { cloneDeep, txidFromData } from './utils';\nimport {\n  LengthPrefixedList,\n  PayloadInput,\n  PayloadWire,\n  PostConditionWire,\n  PublicKeyWire,\n  StacksWireType,\n  createLPList,\n  createMessageSignature,\n  createTransactionAuthField,\n  deserializeLPList,\n  deserializePayload,\n  serializeLPListBytes,\n} from './wire';\n\nexport class StacksTransactionWire {\n  transactionVersion: TransactionVersion;\n  chainId: ChainId;\n  auth: Authorization;\n  payload: PayloadWire;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList<PostConditionWire>;\n\n  /** @deprecated Not used, starting with Stacks 2.5. Still needed for serialization. */\n  anchorMode: AnchorMode;\n\n  constructor({\n    auth,\n    payload,\n    postConditions = createLPList([]),\n    postConditionMode = PostConditionMode.Deny,\n    transactionVersion,\n    chainId,\n    /** The network is only used if `transactionVersion` or `chainId` are not provided */\n    network = 'mainnet',\n  }: {\n    payload: PayloadInput;\n    auth: Authorization;\n    postConditions?: LengthPrefixedList<PostConditionWire>;\n    postConditionMode?: PostConditionMode;\n    transactionVersion?: TransactionVersion;\n    chainId?: ChainId;\n  } & NetworkParam) {\n    network = networkFrom(network);\n\n    this.transactionVersion = transactionVersion ?? network.transactionVersion;\n    this.chainId = chainId ?? network.chainId;\n    this.auth = auth;\n\n    if ('amount' in payload) {\n      this.payload = {\n        ...payload,\n        amount: intToBigInt(payload.amount),\n      };\n    } else {\n      this.payload = payload;\n    }\n\n    this.postConditionMode = postConditionMode;\n    this.postConditions = postConditions;\n\n    this.anchorMode = AnchorMode.Any;\n  }\n\n  /** @deprecated Does NOT mutate transaction, but rather returns the hash of the transaction with a cleared initial authorization */\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  /** @deprecated Alias of `.signBegin()` */\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = intoInitialSighashAuth(tx.auth);\n    return tx.txid();\n  }\n\n  verifyOrigin(): string {\n    return verifyOrigin(this.auth, this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: PrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: PrivateKey): string {\n    if (this.auth.authType === AuthType.Sponsored) {\n      return this.signAndAppend(\n        this.auth.sponsorSpendingCondition,\n        sigHash,\n        AuthType.Sponsored,\n        privateKey\n      );\n    } else {\n      throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n    }\n  }\n\n  /**\n   * Append a public key to the spending-condition of the transaction\n   *\n   * @param publicKey - the public key to append\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * transaction.appendPubkey('034f355bdcb7cc0af728..24c0e585c5e89ac788521e0');\n   * ```\n   */\n  appendPubkey(publicKey: PublicKey): void;\n  appendPubkey(publicKey: PublicKeyWire): void;\n  appendPubkey(publicKey: PublicKey | PublicKeyWire): void {\n    const wire =\n      typeof publicKey === 'object' && 'type' in publicKey\n        ? publicKey\n        : createStacksPublicKey(publicKey);\n\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = publicKeyIsCompressed(wire.data);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          wire\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  // todo: this could be static?\n  /** **Warning**: method mutates the `condition` param */\n  signAndAppend(\n    /** `condition` is mutated by this method */\n    condition: SpendingConditionOpts,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: PrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = createMessageSignature(nextSig);\n    } else {\n      const compressed = privateKeyIsCompressed(privateKey);\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          createMessageSignature(nextSig)\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serializeBytes();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingConditionOpts) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param fee - the fee amount in microstacks\n   */\n  setFee(amount: IntegerType) {\n    this.auth = setFee(this.auth, amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param nonce - the nonce value\n   */\n  setNonce(nonce: IntegerType) {\n    this.auth = setNonce(this.auth, nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: IntegerType) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth = setSponsorNonce(this.auth, nonce);\n  }\n\n  /**\n   * Serialize a transaction to a hex string (byte representation)\n   *\n   * @returns A hex string of the serialized transaction\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * const hex = transaction.serialize();\n   * ```\n   */\n  serialize(): Hex {\n    return bytesToHex(this.serializeBytes());\n  }\n\n  /**\n   * Serialize a transaction to bytes\n   *\n   * @returns A Uint8Array of the serialized transaction\n   * @example\n   * ```ts\n   * import { makeSTXTokenTransfer } from '@stacks/transactions';\n   *\n   * const transaction = makeSTXTokenTransfer({ ... });\n   * const bytes = transaction.serializeBytes();\n   * ```\n   */\n  serializeBytes(): Uint8Array {\n    if (this.transactionVersion === undefined) {\n      throw new SerializationError('\"transactionVersion\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bytesArray = [];\n\n    bytesArray.push(this.transactionVersion);\n    const chainIdBytes = new Uint8Array(4);\n    writeUInt32BE(chainIdBytes, this.chainId, 0);\n    bytesArray.push(chainIdBytes);\n    bytesArray.push(serializeAuthorizationBytes(this.auth));\n    bytesArray.push(this.anchorMode);\n    bytesArray.push(this.postConditionMode);\n    bytesArray.push(serializeLPListBytes(this.postConditions));\n    bytesArray.push(serializePayloadBytes(this.payload));\n\n    return concatArray(bytesArray);\n  }\n}\n\n/**\n * @param tx hex string or bytes of serialized transaction\n */\nexport function deserializeTransaction(tx: string | Uint8Array | BytesReader) {\n  const bytesReader = isInstance(tx, BytesReader) ? tx : new BytesReader(tx);\n  const transactionVersion = bytesReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bytesReader.readUInt32BE();\n  const auth = deserializeAuthorization(bytesReader);\n  const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bytesReader, StacksWireType.PostCondition);\n  const payload = deserializePayload(bytesReader);\n\n  const transaction = new StacksTransactionWire({\n    transactionVersion,\n    chainId,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n  });\n  transaction.anchorMode = anchorMode; // not used anymore, but part of the transaction wire format\n  return transaction;\n}\n\n/** @ignore */\nexport function deriveNetworkFromTx(transaction: StacksTransactionWire) {\n  // todo: maybe add as renamed public method\n  return whenTransactionVersion(transaction.transactionVersion)({\n    [TransactionVersion.Mainnet]: STACKS_MAINNET,\n    [TransactionVersion.Testnet]: STACKS_TESTNET,\n  });\n}\n\n/**\n * Estimates transaction byte length\n * Context:\n * 1) Multi-sig transaction byte length increases by adding signatures\n *    which causes the incorrect fee estimation because the fee value is set while creating unsigned transaction\n * 2) Single-sig transaction byte length remain same due to empty message signature which allocates the space for signature\n * @param {transaction} - StacksTransaction object to be estimated\n * @return {number} Estimated transaction byte length\n */\nexport function estimateTransactionByteLength(transaction: StacksTransactionWire): number {\n  const hashMode = transaction.auth.spendingCondition.hashMode;\n  // List of Multi-sig transaction hash modes\n  const multiSigHashModes = [AddressHashMode.P2SH, AddressHashMode.P2WSH];\n\n  // Check if its a Multi-sig transaction\n  if (multiSigHashModes.includes(hashMode)) {\n    const multiSigSpendingCondition: MultiSigSpendingCondition = transaction.auth\n      .spendingCondition as MultiSigSpendingCondition;\n\n    // Find number of existing signatures if the transaction is signed or partially signed\n    const existingSignatures = multiSigSpendingCondition.fields.filter(\n      field => field.contents.type === StacksWireType.MessageSignature\n    ).length; // existingSignatures will be 0 if its a unsigned transaction\n\n    // Estimate total signature bytes size required for this multi-sig transaction\n    // Formula: totalSignatureLength = (signaturesRequired - existingSignatures) * (SIG_LEN_BYTES + 1 byte for type of signature)\n    const totalSignatureLength =\n      (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n      (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n\n    return transaction.serializeBytes().byteLength + totalSignatureLength;\n  } else {\n    // Single-sig transaction\n    // Signature space already allocated by empty message signature\n    return transaction.serializeBytes().byteLength;\n  }\n}\n\n/**\n * Alias for `transaction.serialize()`\n *\n * Serializes a transaction to a hex string.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, serializeTransaction } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const hex = serializeTransaction(transaction);\n * ```\n */\nexport function serializeTransaction(transaction: StacksTransactionWire): Hex {\n  return transaction.serialize();\n}\n\n/**\n * Alias for `transaction.serializeBytes()`\n *\n * Serializes a transaction to bytes.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, serializeTransactionBytes } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const bytes = serializeTransactionBytes(transaction);\n * ```\n */\nexport function serializeTransactionBytes(transaction: StacksTransactionWire): Uint8Array {\n  return transaction.serializeBytes();\n}\n\n/**\n * Alias for `transaction.serialize()`\n *\n * Serializes a transaction to a hex string.\n *\n * @example\n * ```ts\n * import { makeSTXTokenTransfer, transactionToHex } from '@stacks/transactions';\n *\n * const transaction = makeSTXTokenTransfer({ ... });\n * const hex = transactionToHex(transaction);\n * ```\n */\nexport function transactionToHex(transaction: StacksTransactionWire): string {\n  return transaction.serialize();\n}\n", "import { bytesToHex, validateHash256, with0x } from '@stacks/common';\nimport { NetworkClientParam, clientFromNetwork, networkFrom } from '@stacks/network';\nimport { ClarityValue, NoneCV, deserializeCV, serializeCV } from './clarity';\nimport { ClarityAbi } from './contract-abi';\nimport { NoEstimateAvailableError } from './errors';\nimport {\n  StacksTransactionWire,\n  deriveNetworkFromTx,\n  estimateTransactionByteLength,\n} from './transaction';\nimport {\n  FeeEstimateResponse,\n  FeeEstimation,\n  TxBroadcastResult,\n  TxBroadcastResultOk,\n  TxBroadcastResultRejected,\n} from './types';\nimport { cvToHex, parseReadOnlyResponse } from './utils';\nimport { serializePayloadBytes } from './wire';\n\nexport const BROADCAST_PATH = '/v2/transactions';\nexport const TRANSFER_FEE_ESTIMATE_PATH = '/v2/fees/transfer';\nexport const TRANSACTION_FEE_ESTIMATE_PATH = '/v2/fees/transaction';\nexport const ACCOUNT_PATH = '/v2/accounts';\nexport const CONTRACT_ABI_PATH = '/v2/contracts/interface';\nexport const READONLY_FUNCTION_CALL_PATH = '/v2/contracts/call-read';\nexport const MAP_ENTRY_PATH = '/v2/map_entry';\n\n/**\n * Broadcast a serialized transaction to a Stacks node (which will validate and forward to the network).\n * @param opts.transaction - The transaction to broadcast\n * @param opts.attachment - Optional attachment encoded as a hex string\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns A Promise that resolves to a {@link TxBroadcastResult} object\n */\nexport async function broadcastTransaction({\n  transaction: txOpt,\n  attachment: attachOpt,\n  network: _network,\n  client: _client,\n}: {\n  /** The transaction to broadcast */\n  transaction: StacksTransactionWire;\n  /** Optional attachment in bytes or encoded as a hex string */\n  attachment?: Uint8Array | string;\n} & NetworkClientParam): Promise<TxBroadcastResult> {\n  const tx = txOpt.serialize();\n  const attachment = attachOpt\n    ? typeof attachOpt === 'string'\n      ? attachOpt\n      : bytesToHex(attachOpt)\n    : undefined;\n  const json = attachOpt ? { tx, attachment } : { tx };\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(json),\n  };\n\n  const network = _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${BROADCAST_PATH}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResultRejected;\n    } catch (e) {\n      throw Error('Failed to broadcast transaction (unable to parse node response).', { cause: e });\n    }\n  }\n\n  const text = await response.text();\n  const txid = text.replace(/[\"]+/g, ''); // Replace extra quotes around txid string\n  if (!validateHash256(txid)) throw new Error(text);\n\n  return { txid } as TxBroadcastResultOk;\n}\n\n/** @internal */\nasync function _getNonceApi({\n  address,\n  network = 'mainnet',\n  client: _client,\n}: { address: string } & NetworkClientParam): Promise<bigint> {\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}/extended/v1/address/${address}/nonces`;\n  const response = await client.fetch(url);\n  const result = await response.json();\n  return BigInt(result.possible_next_nonce);\n}\n\n/**\n * Lookup the nonce for an address from a core node\n * @param opts.address - The Stacks address to look up the next nonce for\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to an integer\n */\nexport async function fetchNonce(\n  opts: {\n    /** The Stacks address to look up the next nonce for */\n    address: string;\n  } & NetworkClientParam\n): Promise<bigint> {\n  // Try API first\n  try {\n    return await _getNonceApi(opts);\n  } catch (e) {}\n\n  const network = networkFrom(opts.network ?? 'mainnet');\n  const client = Object.assign({}, clientFromNetwork(network), opts.client);\n  const url = `${client.baseUrl}${ACCOUNT_PATH}/${opts.address}?proof=0`;\n  const response = await client.fetch(url);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const json = (await response.json()) as { nonce: string };\n  return BigInt(json.nonce);\n}\n\n/**\n * @deprecated Use the new {@link fetchFeeEstimateTransaction} function instead.\n *\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * ⚠ Only sensible for token transfer transactions!\n * @param opts.transaction - The token transfer transaction to estimate fees for (or its estimated length in bytes)\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to number of microstacks per byte\n */\nexport async function fetchFeeEstimateTransfer({\n  transaction: txOpt,\n  network: _network,\n  client: _client,\n}: {\n  /** The token transfer transaction to estimate fees for (or its estimated length in bytes) */\n  transaction: StacksTransactionWire | number;\n} & NetworkClientParam): Promise<bigint> {\n  const network = typeof txOpt === 'number' ? 'mainnet' : _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n\n  const url = `${client.baseUrl}${TRANSFER_FEE_ESTIMATE_PATH}`;\n  const response = await client.fetch(url, {\n    headers: { Accept: 'application/text' },\n  });\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error estimating transfer fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const feeRateResult = await response.text();\n  const txBytes =\n    typeof txOpt === 'number'\n      ? BigInt(txOpt)\n      : BigInt(Math.ceil(txOpt.serializeBytes().byteLength));\n  const feeRate = BigInt(feeRateResult);\n  return feeRate * txBytes;\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a Stacks transaction\n * @param opts.payload - The transaction to estimate fees for\n * @param opts.estimatedLength - Optional estimation of the final length (in\n * bytes) of the transaction, including any post-conditions and signatures\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return A promise that resolves to FeeEstimate\n */\nexport async function fetchFeeEstimateTransaction({\n  payload,\n  estimatedLength,\n  network = 'mainnet',\n  client: _client,\n}: {\n  payload: string;\n  estimatedLength?: number;\n} & NetworkClientParam): Promise<[FeeEstimation, FeeEstimation, FeeEstimation]> {\n  const json = {\n    transaction_payload: payload,\n    estimated_len: estimatedLength,\n  };\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(json),\n  };\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${TRANSACTION_FEE_ESTIMATE_PATH}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const body = await response.text().catch(() => '');\n\n    if (body.includes('NoEstimateAvailable')) {\n      let json: { reason_data?: { message?: string } } = {};\n      try {\n        json = JSON.parse(body);\n      } catch (err) {\n        // ignore\n      }\n      throw new NoEstimateAvailableError(json?.reason_data?.message ?? '');\n    }\n\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`\n    );\n  }\n\n  const data: FeeEstimateResponse = await response.json();\n  return data.estimations;\n}\n\n/**\n * Estimates the fee using {@link fetchFeeEstimateTransaction}, but retries to estimate\n * with {@link fetchFeeEstimateTransfer} as a fallback if does not get an estimation due\n * to the {@link NoEstimateAvailableError} error.\n * @param opts.transaction - The transaction to estimate fees for\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n */\nexport async function fetchFeeEstimate({\n  transaction: txOpt,\n  network: _network,\n  client: _client,\n}: {\n  transaction: StacksTransactionWire;\n} & NetworkClientParam): Promise<bigint | number> {\n  const network = _network ?? deriveNetworkFromTx(txOpt);\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n\n  try {\n    const estimatedLength = estimateTransactionByteLength(txOpt);\n    return (\n      await fetchFeeEstimateTransaction({\n        payload: bytesToHex(serializePayloadBytes(txOpt.payload)),\n        estimatedLength,\n        network,\n        client,\n      })\n    )[1].fee;\n  } catch (error) {\n    if (!(error instanceof NoEstimateAvailableError)) throw error;\n    return await fetchFeeEstimateTransfer({ transaction: txOpt, network });\n  }\n}\n\n/**\n * Fetch a contract's ABI\n * @param opts.address - The contracts address\n * @param opts.contractName - The contracts name\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns A promise that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function fetchAbi({\n  contractAddress: address,\n  contractName: name,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractAddress: string;\n  contractName: string;\n} & NetworkClientParam): Promise<ClarityAbi> {\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${CONTRACT_ABI_PATH}/${address}/${name}`;\n  const response = await client.fetch(url);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching contract ABI for contract \"${name}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\n/**\n * Calls a function as read-only from a contract interface.\n * It is not necessary that the function is defined as read-only in the contract\n * @param opts.contractName - The contract name\n * @param opts.contractAddress - The contract address\n * @param opts.functionName - The contract function name\n * @param opts.functionArgs - The contract function arguments\n * @param opts.senderAddress - The address of the (simulated) sender\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @return Returns an object with a status bool (okay) and a result string that\n * is a serialized clarity value in hex format.\n */\nexport async function fetchCallReadOnlyFunction({\n  contractName,\n  contractAddress,\n  functionName,\n  functionArgs,\n  senderAddress,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  /** address of the sender */\n  senderAddress: string;\n} & NetworkClientParam): Promise<ClarityValue> {\n  const json = {\n    sender: senderAddress,\n    arguments: functionArgs.map(arg => cvToHex(arg)),\n  };\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(json),\n  };\n\n  const name = encodeURIComponent(functionName);\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${READONLY_FUNCTION_CALL_PATH}/${contractAddress}/${contractName}/${name}`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return await response.json().then(parseReadOnlyResponse);\n}\n\n/**\n * Fetch data from a contract data map.\n * @param opts.contractAddress - The contract address\n * @param opts.contractName - The contract name\n * @param opts.mapName - The map variable name\n * @param opts.mapKey - The key of the map entry to look up\n * @param opts.api - Optional API info (`.url` & `.fetch`) used for fetch call\n * @returns Promise that resolves to a ClarityValue if the operation succeeds.\n * Resolves to NoneCV if the map does not contain the given key, if the map does not exist, or if the contract prinicipal does not exist\n */\nexport async function fetchContractMapEntry<T extends ClarityValue = ClarityValue>({\n  contractAddress,\n  contractName,\n  mapName,\n  mapKey,\n  network = 'mainnet',\n  client: _client,\n}: {\n  contractAddress: string;\n  contractName: string;\n  mapName: string;\n  mapKey: ClarityValue;\n} & NetworkClientParam): Promise<T | NoneCV> {\n  const keyHex = with0x(serializeCV(mapKey));\n\n  const options = {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(keyHex), // endpoint expects a JSON string atom (quote wrapped string)\n  };\n\n  const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n  const url = `${client.baseUrl}${MAP_ENTRY_PATH}/${contractAddress}/${contractName}/${mapName}?proof=0`;\n  const response = await client.fetch(url, options);\n\n  if (!response.ok) {\n    const msg = await response.text().catch(() => '');\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  const json: { data?: string } = await response.json();\n  if (!json.data) {\n    throw new Error(\n      `Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${\n        response.status\n      }: ${response.statusText}. Attempted to fetch ${\n        client.baseUrl\n      } and failed with the response: \"${JSON.stringify(json)}\"`\n    );\n  }\n\n  try {\n    return deserializeCV<T>(json.data);\n  } catch (error) {\n    throw new Error(`Error deserializing Clarity value \"${json.data}\": ${error}`);\n  }\n}\n", "import {\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionMode,\n  PostConditionPrincipalId,\n  PostConditionType,\n} from './constants';\nimport {\n  FungibleComparator,\n  NonFungibleComparator,\n  PostCondition,\n  PostConditionModeName,\n} from './postcondition-types';\nimport { AssetString } from './types';\nimport {\n  AssetWire,\n  PostConditionPrincipalWire,\n  PostConditionWire,\n  StacksWireType,\n  addressToString,\n  parseAssetString,\n  parsePrincipalString,\n  serializePostConditionWire,\n} from './wire';\n\n/** @internal */\nenum PostConditionCodeWireType {\n  eq = FungibleConditionCode.Equal,\n  gt = FungibleConditionCode.Greater,\n  lt = FungibleConditionCode.Less,\n  gte = FungibleConditionCode.GreaterEqual,\n  lte = FungibleConditionCode.LessEqual,\n\n  sent = NonFungibleConditionCode.Sends,\n  'not-sent' = NonFungibleConditionCode.DoesNotSend,\n}\n\nexport function postConditionToWire(postcondition: PostCondition): PostConditionWire {\n  switch (postcondition.type) {\n    case 'stx-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition) as FungibleConditionCode,\n        amount: BigInt(postcondition.amount),\n      };\n    case 'ft-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition) as FungibleConditionCode,\n        amount: BigInt(postcondition.amount),\n        asset: parseAssetString(postcondition.asset),\n      };\n    case 'nft-postcondition':\n      return {\n        type: StacksWireType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal:\n          postcondition.address === 'origin'\n            ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n            : parsePrincipalString(postcondition.address),\n        conditionCode: conditionTypeToByte(postcondition.condition),\n        asset: parseAssetString(postcondition.asset),\n        assetName: postcondition.assetId,\n      };\n    default:\n      throw new Error('Invalid post condition type');\n  }\n}\n\nexport function wireToPostCondition(wire: PostConditionWire): PostCondition {\n  switch (wire.conditionType) {\n    case PostConditionType.STX:\n      return {\n        type: 'stx-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        amount: wire.amount.toString(),\n      };\n    case PostConditionType.Fungible:\n      return {\n        type: 'ft-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        amount: wire.amount.toString(),\n        asset: assetWireToString(wire.asset),\n      };\n    case PostConditionType.NonFungible:\n      return {\n        type: 'nft-postcondition',\n        address: principalWireToString(wire.principal),\n        condition: conditionByteToType(wire.conditionCode),\n        asset: assetWireToString(wire.asset),\n        assetId: wire.assetName,\n      };\n    default: {\n      const _exhaustiveCheck: never = wire;\n      throw new Error(`Invalid post condition type: ${_exhaustiveCheck}`);\n    }\n  }\n}\n\n/** @internal */\nexport function conditionTypeToByte<T extends FungibleComparator | NonFungibleComparator>(\n  condition: T\n): T extends FungibleComparator ? FungibleConditionCode : NonFungibleConditionCode {\n  return (\n    PostConditionCodeWireType as unknown as Record<\n      T,\n      T extends FungibleComparator ? FungibleConditionCode : NonFungibleConditionCode\n    >\n  )[condition];\n}\n\n/** @internal */\nexport function conditionByteToType<T extends FungibleConditionCode | NonFungibleConditionCode>(\n  wireType: T\n): T extends FungibleConditionCode ? FungibleComparator : NonFungibleComparator {\n  return (\n    PostConditionCodeWireType as unknown as Record<\n      // numerical enums are bidirectional in TypeScript\n      T,\n      T extends FungibleConditionCode ? FungibleComparator : NonFungibleComparator\n    >\n  )[wireType];\n}\n\n/**\n * Convert a post condition to a hex string\n * @param postcondition - The post condition object to convert\n * @returns The hex string representation of the post condition\n *\n * @example\n * ```ts\n * import { postConditionToHex } from '@stacks/transactions';\n *\n * const hex = postConditionToHex({\n *   type: 'stx-postcondition',\n *   address: 'ST00000000000000000002Q6VF78',\n *   condition: 'eq',\n *   amount: '1000000000000000000',\n * });\n * ```\n * @see {@link StxPostCondition}, {@link FungiblePostCondition}, {@link NonFungiblePostCondition}\n */\nexport function postConditionToHex(postcondition: PostCondition): string {\n  const wire = postConditionToWire(postcondition);\n  return serializePostConditionWire(wire);\n}\n\n/** @internal */\nexport function postConditionModeFrom(\n  mode: PostConditionModeName | PostConditionMode\n): PostConditionMode {\n  if (typeof mode === 'number') return mode;\n  if (mode === 'allow') return PostConditionMode.Allow;\n  if (mode === 'deny') return PostConditionMode.Deny;\n  throw new Error(`Invalid post condition mode: ${mode}`);\n}\n\n/** @internal */\nfunction assetWireToString(asset: AssetWire): AssetString {\n  const address = addressToString(asset.address);\n  const contractId = `${address}.${asset.contractName.content}` as const;\n  return `${contractId}::${asset.assetName.content}`;\n}\n\n/** @internal */\nfunction principalWireToString(principal: PostConditionPrincipalWire): string {\n  switch (principal.prefix) {\n    case PostConditionPrincipalId.Origin:\n      return 'origin';\n    case PostConditionPrincipalId.Standard:\n      return addressToString(principal.address);\n    case PostConditionPrincipalId.Contract:\n      const address = addressToString(principal.address);\n      return `${address}.${principal.contractName.content}`;\n    default:\n      const _exhaustiveCheck: never = principal;\n      throw new Error(`Invalid principal type: ${_exhaustiveCheck}`);\n  }\n}\n", "import { PrivateKey, PublicKey } from '@stacks/common';\nimport {\n  SpendingConditionOpts,\n  isNonSequentialMultiSig,\n  isSequentialMultiSig,\n  isSingleSig,\n  nextVerification,\n} from './authorization';\nimport { AddressHashMode, AuthType, PubKeyEncoding } from './constants';\nimport { SigningError } from './errors';\nimport { StacksTransactionWire } from './transaction';\nimport { cloneDeep } from './utils';\nimport { PublicKeyWire, StacksWireType } from './wire';\nimport { createStacksPublicKey } from './keys';\n\n// todo: get rid of signer and combine with transaction class? could reduce code and complexity by calculating sighash newly each sign and append.\nexport class TransactionSigner {\n  transaction: StacksTransactionWire;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransactionWire) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n\n    // If multi-sig spending condition exists, iterate over\n    // auth fields and reconstruct sigHash\n    const spendingCondition = transaction.auth.spendingCondition;\n    if (spendingCondition && !isSingleSig(spendingCondition)) {\n      if (\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksWireType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('SpendingCondition has more signatures than are expected');\n      }\n\n      spendingCondition.fields.forEach(field => {\n        if (field.contents.type !== StacksWireType.MessageSignature) return;\n\n        const signature = field.contents;\n        const nextVerify = nextVerification(\n          this.sigHash,\n          transaction.auth.authType,\n          spendingCondition.fee,\n          spendingCondition.nonce,\n          PubKeyEncoding.Compressed, // always compressed for multisig\n          signature.data\n        );\n\n        if (!isNonSequentialMultiSig(spendingCondition.hashMode)) {\n          this.sigHash = nextVerify.nextSigHash;\n        }\n      });\n    }\n  }\n\n  static createSponsorSigner(\n    transaction: StacksTransactionWire,\n    spendingCondition: SpendingConditionOpts\n  ) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransactionWire = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: PrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    const spendingCondition = this.transaction.auth.spendingCondition;\n    if (\n      spendingCondition.hashMode === AddressHashMode.P2SH ||\n      spendingCondition.hashMode === AddressHashMode.P2WSH\n    ) {\n      // only check oversign on legacy multisig modes\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.filter(\n          field => field.contents.type === StacksWireType.MessageSignature\n        ).length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n\n    if (\n      isSingleSig(this.transaction.auth.spendingCondition) ||\n      isSequentialMultiSig(this.transaction.auth.spendingCondition.hashMode)\n    ) {\n      this.sigHash = nextSighash;\n    }\n  }\n\n  appendOrigin(publicKey: PublicKey): void;\n  appendOrigin(publicKey: PublicKeyWire): void;\n  appendOrigin(publicKey: PublicKey | PublicKeyWire): void {\n    const wire =\n      typeof publicKey === 'object' && 'type' in publicKey\n        ? publicKey\n        : createStacksPublicKey(publicKey);\n\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(wire);\n  }\n\n  signSponsor(privateKey: PrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.authType !== AuthType.Sponsored) {\n      throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransactionWire {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransactionWire) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { PrivateKey, bytesToHex, concatBytes, hexToBytes } from '@stacks/common';\nimport { ClarityType, ClarityValue, serializeCVBytes } from './clarity';\nimport { signMessageHashRsv } from './keys';\n\n// Refer to SIP018 https://github.com/stacksgov/sips/\n// > asciiToBytes('SIP018')\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\n\nexport function hashStructuredData(structuredData: ClarityValue): string {\n  return bytesToHex(sha256(serializeCVBytes(structuredData)));\n}\n\nexport function hashStructuredDataBytes(structuredData: ClarityValue): Uint8Array {\n  return sha256(serializeCVBytes(structuredData));\n}\n\nconst hash256BytesLength = 32;\n\nfunction isDomain(value: ClarityValue): boolean {\n  if (value.type !== ClarityType.Tuple) return false;\n  // Check that the tuple has at least 'name', 'version' and 'chain-id'\n  if (!['name', 'version', 'chain-id'].every(key => key in value.value)) return false;\n  // Check each key is of the right type\n  if (!['name', 'version'].every(key => value.value[key].type === ClarityType.StringASCII))\n    return false;\n\n  if (value.value['chain-id'].type !== ClarityType.UInt) return false;\n  return true;\n}\n\nexport function encodeStructuredData(opts: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): string {\n  const bytes = encodeStructuredDataBytes(opts);\n  return bytesToHex(bytes);\n}\n\nexport function encodeStructuredDataBytes({\n  message,\n  domain,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n}): Uint8Array {\n  const structuredDataHash: Uint8Array = hashStructuredDataBytes(message);\n  if (!isDomain(domain)) {\n    throw new Error(\n      \"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\"\n    );\n  }\n  const domainHash: Uint8Array = hashStructuredDataBytes(domain);\n\n  return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\n\nexport function decodeStructuredDataSignature(signature: string | Uint8Array): {\n  domainHash: string;\n  messageHash: string;\n} {\n  const bytes = decodeStructuredDataSignatureBytes(signature);\n  return {\n    domainHash: bytesToHex(bytes.domainHash),\n    messageHash: bytesToHex(bytes.messageHash),\n  };\n}\n\nexport function decodeStructuredDataSignatureBytes(signature: string | Uint8Array): {\n  domainHash: Uint8Array;\n  messageHash: Uint8Array;\n} {\n  const encodedMessageBytes: Uint8Array =\n    typeof signature === 'string' ? hexToBytes(signature) : signature;\n  const domainHash = encodedMessageBytes.slice(\n    STRUCTURED_DATA_PREFIX.length,\n    STRUCTURED_DATA_PREFIX.length + hash256BytesLength\n  );\n  const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n  return {\n    domainHash,\n    messageHash,\n  };\n}\n\n/**\n * Signs a structured message (ClarityValue) and a domain (ClarityValue) using a private key.\n * The resulting signature along with the original message can be verified using {@link verifyMessageSignature}\n * @returns A recoverable signature (in RSV order)\n */\nexport function signStructuredData({\n  message,\n  domain,\n  privateKey,\n}: {\n  message: ClarityValue;\n  domain: ClarityValue;\n  privateKey: PrivateKey;\n}): string {\n  const structuredDataHash = bytesToHex(sha256(encodeStructuredDataBytes({ message, domain })));\n\n  return signMessageHashRsv({\n    messageHash: structuredDataHash,\n    privateKey,\n  });\n}\n", "import { c32address, c32addressDecode } from 'c32check';\nimport { AddressVersion } from '../constants';\nimport { privateKeyToAddress, publicKeyToAddressSingleSig } from '../keys';\nimport { AddressString, ContractIdString } from '../types';\n\nconst C32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\n\nexport type AddressRepr = { hash160: string; contractName?: string } & (\n  | {\n      version: AddressVersion;\n      versionChar: string;\n    }\n  | {\n      version: AddressVersion;\n    }\n  | {\n      versionChar: string;\n    }\n);\n\n/**\n * Parse a C32 Stacks address string to an address object.\n * @param address - The address string to parse.\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.parse('SP000000000000000000002Q6VF78');\n * // { version: 22, versionChar: 'P', hash160: '0000000000000000000000000000000000000000' }\n *\n * const address = Address.parse('ST000000000000000000002AMW42H.pox');\n * // { version: 22, versionChar: 'P', hash160: '0000000000000000000000000000000000000000', contractName: 'pox' }\n * ```\n */\nexport function parse(\n  address:\n    | AddressString\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\n    | ContractIdString\n): AddressRepr {\n  const [addr, contractName] = address.split('.');\n  const parsed = c32addressDecode(addr);\n  return {\n    version: parsed[0],\n    versionChar: C32[parsed[0]],\n    hash160: parsed[1],\n    contractName: contractName,\n  };\n}\n\n/**\n * Stringify an address to the C32 address format.\n * @param address - The address object to stringify.\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.stringify({ version: 22, hash160: '0000000000000000000000000000000000000000' });\n * console.log(address); // 'SP000000000000000000002Q6VF78'\n *\n * const address = Address.stringify({ versionChar: 'P', hash160: '0000000000000000000000000000000000000000' });\n * console.log(address); // 'SP000000000000000000002Q6VF78'\n * ```\n */\nexport function stringify(address: AddressRepr): string {\n  const version =\n    'version' in address ? address.version : C32.indexOf(address.versionChar.toUpperCase());\n  const addr = c32address(version, address.hash160);\n\n  if (address.contractName) return `${addr}.${address.contractName}`;\n  return addr;\n}\n\n/**\n * Convert a private key to a single-sig C32 Stacks address.\n * @param privateKey - The private key to convert.\n * @returns The address string.\n *\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.fromPrivateKey('73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801');\n * // 'SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR'\n *\n * const address = Address.fromPrivateKey('73a2f291df5a8ce3ceb668a25ac7af45639513af7596d710ddf59f64f484fd2801', 'testnet');\n * // 'ST10J81WVGVB3M4PHQN4Q4G0R8586TBJH94CGRESQ'\n * ```\n */\nexport const fromPrivateKey = privateKeyToAddress;\n\n/**\n * Convert a public key to a single-sig C32 Stacks address.\n * @param publicKey - The public key to convert.\n * @returns The address string.\n *\n * @example\n * ```ts\n * import { Address } from '@stacks/transactions';\n *\n * const address = Address.fromPublicKey('0316e35d38b52d4886e40065e4952a49535ce914e02294be58e252d1998f129b19');\n * // 'SP10J81WVGVB3M4PHQN4Q4G0R8586TBJH948RESDR'\n *\n * const address = Address.fromPublicKey('0316e35d38b52d4886e40065e4952a49535ce914e02294be58e252d1998f129b19', 'testnet');\n * // 'ST10J81WVGVB3M4PHQN4Q4G0R8586TBJH94CGRESQ'\n * ```\n */\nexport const fromPublicKey = publicKeyToAddressSingleSig;\n\n// todo: add `fromPublicKeys` for multi-sig\n", "import { asciiToBytes, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  boolCV,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  serializeCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  tupleCV,\n  uintCV,\n} from './clarity';\n\nexport { prettyPrint, stringify } from './clarity/prettyPrint';\n\nexport { parse } from './clarity/parser';\n\n// todo: https://github.com/hirosystems/clarinet/issues/786\n\n// Primitives //////////////////////////////////////////////////////////////////\n/**\n * `Cl.bool` — Creates a Clarity boolean type, represented as a JS object\n *\n * Alias for {@link boolCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bool(true);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const bool = boolCV;\n/**\n * `Cl.int` — Creates a Clarity `int` type, represented as a JS object\n *\n * Alias for {@link intCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.int(-100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const int = intCV;\n/**\n * `Cl.uInt` — Creates a Clarity `uint` type, represented as a JS object\n *\n * Alias for {@link uintCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.uint(100);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const uint = uintCV;\n\n/**\n * `Cl.principal` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.principal('ST000000000000000000002AMW42H');\n * Cl.principal('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport function principal(address: string) {\n  const [addr, name] = address.split('.');\n  return name ? contractPrincipalCV(addr, name) : standardPrincipalCV(addr);\n}\n/**\n * `Cl.address` — Creates a Clarity principal type, represented as a JS object\n * @param address - A Stacks address (optionally with a contract name in the string)\n *\n * Alias for {@link principal | `Cl.principal`}\n *\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.address('ST000000000000000000002AMW42H');\n * Cl.address('ST000000000000000000002AMW42H.asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const address = principal;\n/**\n * `Cl.contractPrincipal` — Creates a Clarity contract `principal` type, represented as a JS object\n *\n * Alias for {@link contractPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.contractPrincipal('ST000000000000000000002AMW42H', 'asset');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const contractPrincipal = contractPrincipalCV;\n/**\n * `Cl.standardPrincipal` — Creates a Clarity standard `principal` type, represented as a JS object\n *\n * Alias for {@link standardPrincipalCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.standardPrincipal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const standardPrincipal = standardPrincipalCV;\n\n// Sequences ///////////////////////////////////////////////////////////////////\n/**\n * `Cl.list` — Creates a Clarity `list` type, represented as a JS object\n *\n * Alias for {@link listCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.list([Cl.int(100), Cl.int(200)]);\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const list = listCV;\n/**\n * `Cl.stringAscii` — Creates a Clarity `string-ascii` type, represented as a JS object\n *\n * Alias for {@link stringAsciiCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringAscii('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringAscii = stringAsciiCV;\n/**\n * `Cl.stringUtf8` — Creates a Clarity `string-utf8` type, represented as a JS object\n *\n * Alias for {@link stringUtf8CV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.stringUtf8('hello world');\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringUtf8 = stringUtf8CV;\n/**\n * `Cl.buffer` — Creates a Clarity `buffer` type, represented as a JS object\n *\n * Alias for {@link bufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.buffer(Uint8Array.from([0x01, 0x02, 0x03]));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const buffer = bufferCV;\n/**\n * `Cl.bufferFromHex` — Converts bytes (from a hex string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a hex string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromHex('a1b2c3');\n * ```\n */\nexport const bufferFromHex = (hex: string) => bufferCV(hexToBytes(hex));\n/**\n * `Cl.bufferFromAscii` — Converts bytes (from an ASCII string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as an ASCII string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromAscii('hello world');\n * ```\n */\nexport const bufferFromAscii = (ascii: string) => bufferCV(asciiToBytes(ascii));\n/**\n * `Cl.bufferFromUtf8` — Converts bytes (from an UTF-8 string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a UTF-8 string\n * @returns input encoded as a {@link BufferCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.bufferFromUtf8('hello world');\n * ```\n */\nexport const bufferFromUtf8 = (utf8: string) => bufferCV(utf8ToBytes(utf8));\n\n// Composites //////////////////////////////////////////////////////////////////\n/**\n * `Cl.none` — Creates a Clarity optional `none` type, represented as a JS object\n *\n * Alias for {@link noneCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.none();\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const none = noneCV;\n/**\n * `Cl.some` — Creates a Clarity optional `some` type, represented as a JS object\n *\n * Alias for {@link someCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.some(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const some = someCV;\n/**\n * `Cl.ok` — Creates a Clarity response `ok` type, represented as a JS object\n *\n * Alias for {@link responseOkCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.ok(Cl.uint(100));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const ok = responseOkCV;\n/**\n * `Cl.error` — Creates a Clarity response `error` type, represented as a JS object\n *\n * Alias for {@link responseErrorCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.error(Cl.uint(9900));\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const error = responseErrorCV;\n/**\n * `Cl.tuple` — Creates a Clarity `tuple` type, represented as a JS object\n *\n * Alias for {@link tupleCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.tuple({\n *   a: Cl.uint(100),\n *   b: Cl.stringUtf8('hello world'),\n * })\n * ```\n * @see {@link serialize}, {@link deserialize}\n */\nexport const tuple = tupleCV;\n\n// Methods /////////////////////////////////////////////////////////////////////\n/**\n * `Cl.serialize` — Serializes a Clarity JS object to the equivalent hex-encoded representation\n *\n * Alias for {@link serializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.serialize(Cl.uint(100));\n * ```\n * @see {@link deserialize}\n */\nexport const serialize = serializeCV;\n/**\n * `Cl.deserialize` — Deserializes a hex string to the equivalent Clarity JS object\n *\n * Alias for {@link deserializeCV}\n * @example\n * ```\n * import { Cl } from '@stacks/transactions';\n * Cl.deserialize(\"0c00000001016103\");\n * ```\n * @see {@link serialize}\n */\nexport const deserialize = deserializeCV;\n\n// todo: add `deserializeReadable` methods that translates enums into name strings\n", "/*\n  Format Clarity Values into Clarity style readable strings\n  eg:\n  `Cl.uint(1)` => u1\n  `Cl.list(Cl.uint(1))` => (list u1)\n  `Cl.tuple({ id: u1 })` => { id: u1 }\n*/\n\nimport { ClarityType, ClarityValue, ListCV, TupleCV } from '.';\n\nfunction escape(value: string): string {\n  // Use JSON.stringify to handle all necessary escape sequences (e.g., \\n, \\r, \\t, \\\", \\\\, \\uXXXX).\n  // JSON.stringify(value) produces a string like \"\\\"hello\\nworld\\\"\", so we slice off the leading and trailing quotes.\n  return JSON.stringify(value).slice(1, -1);\n}\n\nfunction formatSpace(space: number, depth: number, end = false) {\n  if (!space) return ' ';\n  return `\\n${' '.repeat(space * (depth - (end ? 1 : 0)))}`;\n}\n\n/**\n * @description format List clarity values in clarity style strings\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatList(Cl.list([Cl.uint(1)]))\n * // (list u1)\n *\n * formatList(Cl.list([Cl.uint(1)]), 2)\n * // (list\n * //   u1\n * // )\n * ```\n */\nfunction formatList(cv: ListCV, space: number, depth = 1): string {\n  if (cv.value.length === 0) return '(list)';\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = space ? formatSpace(space, depth, true) : '';\n\n  const items = cv.value.map(v => prettyPrintWithDepth(v, space, depth)).join(spaceBefore);\n\n  return `(list${spaceBefore}${items}${endSpace})`;\n}\n\n/**\n * @description format Tuple clarity values in clarity style strings\n * the keys are alphabetically sorted\n * with the ability to prettify the result with line break end space indentation\n * @example\n * ```ts\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }))\n * // { age: 20, id: u1 }\n *\n * formatTuple(Cl.tuple({ id: Cl.uint(1), age: Cl.uint(20) }, 2))\n * // {\n * //   age: 20,\n * //   id: u1\n * // }\n * ```\n */\nfunction formatTuple(cv: TupleCV, space: number, depth = 1): string {\n  if (Object.keys(cv.value).length === 0) return '{}';\n\n  const items: string[] = [];\n  for (const [key, value] of Object.entries(cv.value)) {\n    items.push(`${key}: ${prettyPrintWithDepth(value, space, depth)}`);\n  }\n\n  const spaceBefore = formatSpace(space, depth, false);\n  const endSpace = formatSpace(space, depth, true);\n\n  return `{${spaceBefore}${items.sort().join(`,${spaceBefore}`)}${endSpace}}`;\n}\n\nfunction exhaustiveCheck(param: never): never {\n  throw new Error(`invalid clarity value type: ${param}`);\n}\n\n// the exported function should not expose the `depth` argument\nfunction prettyPrintWithDepth(cv: ClarityValue, space = 0, depth: number): string {\n  if (cv.type === ClarityType.BoolFalse) return 'false';\n  if (cv.type === ClarityType.BoolTrue) return 'true';\n\n  if (cv.type === ClarityType.Int) return cv.value.toString();\n  if (cv.type === ClarityType.UInt) return `u${cv.value.toString()}`;\n\n  if (cv.type === ClarityType.StringASCII) return `\"${escape(cv.value)}\"`;\n  if (cv.type === ClarityType.StringUTF8) return `u\"${escape(cv.value)}\"`;\n\n  if (cv.type === ClarityType.PrincipalContract) return `'${cv.value}`;\n  if (cv.type === ClarityType.PrincipalStandard) return `'${cv.value}`;\n\n  if (cv.type === ClarityType.Buffer) return `0x${cv.value}`;\n\n  if (cv.type === ClarityType.OptionalNone) return 'none';\n  if (cv.type === ClarityType.OptionalSome)\n    return `(some ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.ResponseOk)\n    return `(ok ${prettyPrintWithDepth(cv.value, space, depth)})`;\n  if (cv.type === ClarityType.ResponseErr)\n    return `(err ${prettyPrintWithDepth(cv.value, space, depth)})`;\n\n  if (cv.type === ClarityType.List) {\n    return formatList(cv, space, depth + 1);\n  }\n  if (cv.type === ClarityType.Tuple) {\n    return formatTuple(cv, space, depth + 1);\n  }\n\n  // make sure that we exhausted all ClarityTypes\n  exhaustiveCheck(cv);\n}\n\n/**\n * Format clarity values in clarity style strings with the ability to prettify\n * the result with line break end space indentation.\n * @param cv The Clarity Value to format\n * @param space The indentation size of the output string. There's no indentation and no line breaks if space = 0\n * @example\n * ```ts\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }))\n * // { age: (some u42), id: u1 }\n *\n * prettyPrint(Cl.tuple({ id: Cl.uint(1), age: Cl.some(Cl.uint(42)) }, 2))\n * // {\n * //   age: (some u42),\n * //   id: u1\n * // }\n * ```\n */\nexport function stringify(cv: ClarityValue, space = 0): string {\n  return prettyPrintWithDepth(cv, space, 0);\n}\n\n/** @deprecated alias for {@link Cl.stringify} */\nexport const prettyPrint = stringify;\n", "import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityValue } from './clarity';\nimport {\n  FungibleComparator,\n  FungiblePostCondition,\n  NonFungibleComparator,\n  NonFungiblePostCondition,\n  PostCondition,\n  StxPostCondition,\n} from './postcondition-types';\nimport { AddressString, AssetString, ContractIdString } from './types';\nimport { parseContractId, validateStacksAddress } from './utils';\nimport { deserializePostConditionWire } from './wire';\nimport { wireToPostCondition } from './postcondition';\n\n/// `Pc.` Post Condition Builder\n//\n// This is a behavioral helper interface for constructing post conditions.\n//\n// The general pattern is:\n//   PRINCIPAL -> [AMOUNT] -> CODE -> ASSET\n//\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @param {AddressString | ContractIdString} principal The principal to check, which should/should-not be sending assets. A string in the format `<address>` or `<contractAddress>.<contractName>`.\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(10000).ustx();\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6.mycontract').willSendGte(2000).ft();\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function principal(principal: AddressString | ContractIdString) {\n  const [address, name] = principal.split('.');\n\n  // todo: improve validity check (and add helper methods like `isValidContractId`, `isValidAdress`,\n  // token name, asset syntax, etc.) -- also deupe .split checks in codebase\n  if (!address || !validateStacksAddress(address) || (typeof name === 'string' && !name)) {\n    throw new Error(`Invalid contract id: ${principal}`);\n  }\n\n  return new PartialPcWithPrincipal(principal);\n}\n\n/**\n * ### `Pc.` Post Condition Builder\n * @beta Interface may be subject to change in future releases.\n * @returns A partial post condition builder, which can be chained into a final post condition.\n * @example\n * ```\n * import { Pc } from '@stacks/transactions';\n * Pc.origin().willSendEq(10000).ustx();\n * Pc.origin().willSendGte(2000).ft();\n * ```\n */\nexport function origin() {\n  return new PartialPcWithPrincipal('origin');\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcWithPrincipal {\n  constructor(private address: string) {}\n\n  // todo: split FT and STX into separate methods? e.g. `willSendSTXEq` and `willSendFtEq`\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Equal` (equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(100).stx();\n   * ```\n   */\n  willSendEq(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'eq');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.LessEqual` (less-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLte(100).stx();\n   * ```\n   */\n  willSendLte(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'lte');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Less` (less-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLt(100).stx();\n   * ```\n   */\n  willSendLt(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'lt');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.GreaterEqual` (greater-than or equal to) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGte(100).stx();\n   * ```\n   */\n  willSendGte(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'gte');\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * A post-condition sending tokens `FungibleConditionCode.Greater` (greater-than) the given amount of uSTX or fungible-tokens.\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGt(100).stx();\n   * ```\n   */\n  willSendGt(amount: IntegerType) {\n    return new PartialPcFtWithCode(this.address, amount, 'gt');\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.Sends` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willSendAsset() {\n    return new PartialPcNftWithCode(this.address, 'sent');\n  }\n\n  /**\n   * ### NFT Post Condition\n   * A post-condition which `NonFungibleConditionCode.DoesNotSend` an NFT.\n   * Finalize with the chained `.nft(…)` method.\n   * @example\n   * ```\n   * import { Pc } from '@stacks/transactions';\n   * Pc.principal('STB4…K6.nft-contract').willNotSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\n   * ```\n   */\n  willNotSendAsset() {\n    return new PartialPcNftWithCode(this.address, 'not-sent');\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcFtWithCode {\n  constructor(\n    private address: string,\n    private amount: IntegerType,\n    private code: FungibleComparator\n  ) {}\n\n  /**\n   * ### STX Post Condition\n   * ⚠ Amount of STX is denoted in uSTX (micro-STX)\n   */\n  ustx(): StxPostCondition {\n    // todo: rename to `uSTX`?\n    return {\n      type: 'stx-postcondition',\n      address: this.address,\n      condition: this.code,\n      amount: intToBigInt(this.amount).toString(),\n    };\n  }\n\n  /**\n   * ### Fungible Token Post Condition\n   * ⚠ Amount of fungible tokens is denoted in the smallest unit of the token\n   */\n  ft(contractId: ContractIdString, tokenName: string): FungiblePostCondition {\n    // todo: allow taking one arg (`Asset`) as well, overload\n\n    const [address, name] = contractId.split('.');\n    if (!address || !validateStacksAddress(address) || (typeof name === 'string' && !name)) {\n      throw new Error(`Invalid contract id: ${contractId}`);\n    }\n\n    return {\n      type: 'ft-postcondition',\n      address: this.address,\n      condition: this.code,\n      amount: intToBigInt(this.amount).toString(),\n      asset: `${contractId}::${tokenName}`,\n    };\n  }\n}\n\n/**\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\n */\nclass PartialPcNftWithCode {\n  constructor(\n    private address: string,\n    private code: NonFungibleComparator\n  ) {}\n\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param assetName - The name of the NFT asset. Formatted as `<contract-address>.<contract-name>::<token-name>`.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(assetName: AssetString, assetId: ClarityValue): NonFungiblePostCondition;\n  /**\n   * ### Non-Fungible Token Post Condition\n   * @param contractId - The contract identifier of the NFT. Formatted as `<contract-address>.<contract-name>`.\n   * @param tokenName - The name of the NFT asset.\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\n   */\n  nft(\n    contractId: ContractIdString,\n    tokenName: string,\n    assetId: ClarityValue\n  ): NonFungiblePostCondition;\n  nft(...args: [any, any] | [any, any, any]): NonFungiblePostCondition {\n    const { contractAddress, contractName, tokenName, assetId } = getNftArgs(\n      ...(args as [any, any, any])\n    );\n\n    if (!validateStacksAddress(contractAddress)) {\n      throw new Error(`Invalid contract id: ${contractAddress}`);\n    }\n\n    return {\n      type: 'nft-postcondition',\n      address: this.address,\n      condition: this.code,\n      asset: `${contractAddress}.${contractName}::${tokenName}`,\n      assetId,\n    };\n  }\n}\n\n/** @internal */\nfunction parseNft(nftAssetName: AssetString) {\n  const [principal, tokenName] = nftAssetName.split('::') as [ContractIdString, string];\n  if (!principal || !tokenName)\n    throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\n  const [address, name] = parseContractId(principal);\n  return { contractAddress: address, contractName: name, tokenName };\n}\n\n/**\n * Deserializes a serialized post condition hex string into a post condition object\n * @param hex - Post condition hex string\n * @returns Deserialized post condition\n * @example\n * ```ts\n * import { Pc } from '@stacks/transactions';\n *\n * const hex = '00021600000000000000000000000000000000000000000200000000000003e8'\n * const postCondition = Pc.fromHex(hex);\n * // {\n * //   type: 'stx-postcondition',\n * //   address: 'SP000000000000000000002Q6VF78',\n * //   condition: 'gt',\n * //   amount: '1000'\n * // }\n * ```\n */\nexport function fromHex(hex: string): PostCondition {\n  const wire = deserializePostConditionWire(hex);\n  return wireToPostCondition(wire);\n}\n\n/**\n * Helper method for `PartialPcNftWithCode.nft` to parse the arguments.\n * @internal\n */\nfunction getNftArgs(\n  asset: AssetString,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(\n  contractId: ContractIdString,\n  tokenName: string,\n  assetId: ClarityValue\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\nfunction getNftArgs(...args: [any, any] | [any, any, any]): {\n  contractAddress: string;\n  contractName: string;\n  tokenName: string;\n  assetId: ClarityValue;\n} {\n  if (args.length === 2) {\n    const [assetName, assetId] = args;\n    return { ...parseNft(assetName), assetId };\n  }\n\n  // args.length === 3\n  const [contractId, tokenName, assetId] = args;\n  const [address, name] = parseContractId(contractId);\n  return { contractAddress: address, contractName: name, tokenName, assetId };\n}\n"],
  "mappings": "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",
  "names": ["createView", "rotr", "hexes", "bytesToHex", "hexToBytes", "utf8ToBytes", "toBytes", "concatBytes", "Hash", "wrapConstructor", "randomBytes", "number", "bool", "bytes", "hash", "exists", "output", "assert", "setBigUint64", "isLE", "_32n", "SHA2", "buffer", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA224", "i", "j", "buffer", "bytes", "c32address", "c32addressDecode", "Uint8Array", "DataView", "Map", "Promise", "Set", "WeakMap", "Hash", "key", "buffer", "cloneDeep", "error", "bytes", "bytes", "ChainId", "PeerNetworkId", "TransactionVersion", "AddressVersion", "PayloadType", "ClarityVersion", "AnchorMode", "PostConditionMode", "PostConditionType", "AuthType", "AddressHashMode", "PubKeyEncoding", "FungibleConditionCode", "NonFungibleConditionCode", "PostConditionPrincipalId", "AssetType", "TenureChangeCause", "AuthFieldType", "TxRejectedReason", "hash", "hexes", "utf8ToBytes", "hash", "isLE", "_32n", "buffer", "d", "window", "f", "bytes", "hexToBytes", "bytesToHex", "concatBytes", "hexes", "number", "hash", "hashLen", "error", "bytes", "concatBytes", "error", "crypto", "bytesToHex", "hexToBytes", "concatBytes", "error", "hash", "crypto", "randomBytes", "buffer", "import_c32check", "import_c32check", "ClarityType", "ClarityWireType", "bool", "buffer", "StacksWireType", "import_c32check", "address", "principal", "list", "smartContractName", "codeBody", "recipient", "hash", "address", "principal", "address", "bytes", "address", "error", "lodashCloneDeep", "regex", "address", "verify", "import_c32check", "ClarityAbiTypeId", "addr", "name", "tuple", "address", "address", "json", "error", "PostConditionCodeWireType", "address", "principal", "address", "hash", "bytes", "parse", "import_c32check", "parse", "address", "bool", "stringify", "stringify", "bool", "address", "principal", "principal", "address", "assetId"]
}
